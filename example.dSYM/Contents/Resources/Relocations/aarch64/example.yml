---
triple:          'arm64-apple-darwin'
binary-path:     '/Users/mikhailtavarez/Git/mojo/banjo/example'
relocations:
  - { offsetInCU: 0x1A, offset: 0x1A, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__str__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"banjo::key::Key::__str__(banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)"}]', symObjAddr: 0x1634, symBinAddr: 0x100004A54, symSize: 0x3BC }
  - { offsetInCU: 0xE05, offset: 0xE05, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__str__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"banjo::key::Key::__str__(banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)"}]', symObjAddr: 0x1634, symBinAddr: 0x100004A54, symSize: 0x3BC }
  - { offsetInCU: 0x1B46, offset: 0x1B46, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"banjo::key::KeyType">>, index, {"__str__" : (!kgen.pointer<index> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"banjo::key::KeyType::__str__(banjo::key::KeyType)", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"banjo::key::KeyType::__del__(banjo::key::KeyType)"}]', symObjAddr: 0x19F0, symBinAddr: 0x100004E10, symSize: 0x54 }
  - { offsetInCU: 0x1A, offset: 0x1D55, size: 0x8, addend: 0x0, symName: _main, symObjAddr: 0x1A80, symBinAddr: 0x100004EA0, symSize: 0x584 }
  - { offsetInCU: 0x858, offset: 0x2593, size: 0x8, addend: 0x0, symName: _main, symObjAddr: 0x1A80, symBinAddr: 0x100004EA0, symSize: 0x584 }
  - { offsetInCU: 0x1A, offset: 0x345F, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::_startup::__wrap_and_execute_raising_main[fn() raises -> None](::SIMD[{int32}, {1}],__mlir_type.!kgen.pointer<pointer<scalar<ui8>>>),main_func=_"example::main()"_closure_0', symObjAddr: 0x2648, symBinAddr: 0x100005A68, symSize: 0x8 }
  - { offsetInCU: 0x27, offset: 0x346C, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::_startup::__wrap_and_execute_raising_main[fn() raises -> None](::SIMD[{int32}, {1}],__mlir_type.!kgen.pointer<pointer<scalar<ui8>>>),main_func=_"example::main()"_closure_0', symObjAddr: 0x2648, symBinAddr: 0x100005A68, symSize: 0x8 }
  - { offsetInCU: 0x1A, offset: 0x34B8, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::_startup::__wrap_and_execute_raising_main[fn() raises -> None](::SIMD[{int32}, {1}],__mlir_type.!kgen.pointer<pointer<scalar<ui8>>>),main_func=_"example::main()"_closure_1', symObjAddr: 0x2650, symBinAddr: 0x100005A70, symSize: 0x4 }
  - { offsetInCU: 0x27, offset: 0x34C5, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::_startup::__wrap_and_execute_raising_main[fn() raises -> None](::SIMD[{int32}, {1}],__mlir_type.!kgen.pointer<pointer<scalar<ui8>>>),main_func=_"example::main()"_closure_1', symObjAddr: 0x2650, symBinAddr: 0x100005A70, symSize: 0x4 }
  - { offsetInCU: 0x1A, offset: 0x351A, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::debug_assert::_debug_assert_msg[::Bool,Origin[$0.value],Variadic[stdlib::utils::write::Writable]](::VariadicPack[$0, $1, stdlib::utils::write::Writable, $2],::_SourceLocation),elt_is_mutable`=0,element_types`2=[[typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"write_to" : <type>(!kgen.pointer<index> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|5J6dtpZEJKHhpuZ8i7gIfomLZ0FPr0/wYZCK9YRjimY=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None](::Int,$0&)"<:type ?, :<type>(index, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::int::Int::write_to[stdlib::utils::write::Writer](::Int,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"write_to" : <type>(!kgen.pointer<index> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|5J6dtpZEJKHhpuZ8i7gIfomLZ0FPr0/wYZCK9YRjimY=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None](::Int,$0&)"<:type ?, :<type>(index, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::int::Int::write_to[stdlib::utils::write::Writer](::Int,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"write_to" : <type>(!kgen.pointer<index> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|5J6dtpZEJKHhpuZ8i7gIfomLZ0FPr0/wYZCK9YRjimY=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None](::Int,$0&)"<:type ?, :<type>(index, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::int::Int::write_to[stdlib::utils::write::Writer](::Int,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"write_to" : <type>(!kgen.pointer<index> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|5J6dtpZEJKHhpuZ8i7gIfomLZ0FPr0/wYZCK9YRjimY=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None](::Int,$0&)"<:type ?, :<type>(index, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::int::Int::write_to[stdlib::utils::write::Writer](::Int,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}]]', symObjAddr: 0x2654, symBinAddr: 0x100005A74, symSize: 0x250 }
  - { offsetInCU: 0xA4F, offset: 0x3F4F, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::debug_assert::_debug_assert_msg[::Bool,Origin[$0.value],Variadic[stdlib::utils::write::Writable]](::VariadicPack[$0, $1, stdlib::utils::write::Writable, $2],::_SourceLocation),elt_is_mutable`=0,element_types`2=[[typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"write_to" : <type>(!kgen.pointer<index> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|5J6dtpZEJKHhpuZ8i7gIfomLZ0FPr0/wYZCK9YRjimY=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None](::Int,$0&)"<:type ?, :<type>(index, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::int::Int::write_to[stdlib::utils::write::Writer](::Int,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"write_to" : <type>(!kgen.pointer<index> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|5J6dtpZEJKHhpuZ8i7gIfomLZ0FPr0/wYZCK9YRjimY=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None](::Int,$0&)"<:type ?, :<type>(index, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::int::Int::write_to[stdlib::utils::write::Writer](::Int,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"write_to" : <type>(!kgen.pointer<index> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|5J6dtpZEJKHhpuZ8i7gIfomLZ0FPr0/wYZCK9YRjimY=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None](::Int,$0&)"<:type ?, :<type>(index, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::int::Int::write_to[stdlib::utils::write::Writer](::Int,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"write_to" : <type>(!kgen.pointer<index> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|5J6dtpZEJKHhpuZ8i7gIfomLZ0FPr0/wYZCK9YRjimY=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None](::Int,$0&)"<:type ?, :<type>(index, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::int::Int::write_to[stdlib::utils::write::Writer](::Int,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}]]', symObjAddr: 0x2654, symBinAddr: 0x100005A74, symSize: 0x250 }
  - { offsetInCU: 0x1A, offset: 0x500C, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::debug_assert::_debug_assert_msg[::Bool,Origin[$0.value],Variadic[stdlib::utils::write::Writable]](::VariadicPack[$0, $1, stdlib::utils::write::Writable, $2],::_SourceLocation),elt_is_mutable`=0,element_types`2=[[typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}]]', symObjAddr: 0x28A4, symBinAddr: 0x100005CC4, symSize: 0x1E8 }
  - { offsetInCU: 0x95D, offset: 0x594F, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::debug_assert::_debug_assert_msg[::Bool,Origin[$0.value],Variadic[stdlib::utils::write::Writable]](::VariadicPack[$0, $1, stdlib::utils::write::Writable, $2],::_SourceLocation),elt_is_mutable`=0,element_types`2=[[typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}]]', symObjAddr: 0x28A4, symBinAddr: 0x100005CC4, symSize: 0x1E8 }
  - { offsetInCU: 0x1A, offset: 0x65C2, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::dtype::DType::write_to[stdlib::utils::write::Writer](::DType,$0&),W=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_bytes" : <i1>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::collections::string::String::write_bytes[::Bool,::Origin[$0]](stdlib::collections::string::String&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::write[*stdlib::utils::write::Writable](stdlib::collections::string::String&,*$0)"<:variadic<type> ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]', symObjAddr: 0x2A8C, symBinAddr: 0x100005EAC, symSize: 0x1C8 }
  - { offsetInCU: 0xF6, offset: 0x669E, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::dtype::DType::write_to[stdlib::utils::write::Writer](::DType,$0&),W=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_bytes" : <i1>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::collections::string::String::write_bytes[::Bool,::Origin[$0]](stdlib::collections::string::String&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::write[*stdlib::utils::write::Writable](stdlib::collections::string::String&,*$0)"<:variadic<type> ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]', symObjAddr: 0x2A8C, symBinAddr: 0x100005EAC, symSize: 0x1C8 }
  - { offsetInCU: 0x1A, offset: 0x6815, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::error::Error::__init__(::Error=&,stdlib::collections::string::String)', symObjAddr: 0x2C54, symBinAddr: 0x100006074, symSize: 0x144 }
  - { offsetInCU: 0x479, offset: 0x6C74, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::error::Error::__init__(::Error=&,stdlib::collections::string::String)', symObjAddr: 0x2C54, symBinAddr: 0x100006074, symSize: 0x144 }
  - { offsetInCU: 0x1A, offset: 0x6FC7, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::error::Error::__str__(::Error)', symObjAddr: 0x2D98, symBinAddr: 0x1000061B8, symSize: 0x3C }
  - { offsetInCU: 0x27, offset: 0x6FD4, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::error::Error::__str__(::Error)', symObjAddr: 0x2D98, symBinAddr: 0x1000061B8, symSize: 0x3C }
  - { offsetInCU: 0x1A, offset: 0x70B3, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::error::Error::write_to[stdlib::utils::write::Writer](::Error,$0&),W=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_bytes" : <i1>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::collections::string::String::write_bytes[::Bool,::Origin[$0]](stdlib::collections::string::String&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::write[*stdlib::utils::write::Writable](stdlib::collections::string::String&,*$0)"<:variadic<type> ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]', symObjAddr: 0x2DD4, symBinAddr: 0x1000061F4, symSize: 0x74 }
  - { offsetInCU: 0x3FA, offset: 0x7493, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::error::Error::write_to[stdlib::utils::write::Writer](::Error,$0&),W=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_bytes" : <i1>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::collections::string::String::write_bytes[::Bool,::Origin[$0]](stdlib::collections::string::String&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::write[*stdlib::utils::write::Writable](stdlib::collections::string::String&,*$0)"<:variadic<type> ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]', symObjAddr: 0x2DD4, symBinAddr: 0x1000061F4, symSize: 0x74 }
  - { offsetInCU: 0x1A, offset: 0x76A5, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::int::Int::__str__(::Int)', symObjAddr: 0x2E48, symBinAddr: 0x100006268, symSize: 0x3C }
  - { offsetInCU: 0x27, offset: 0x76B2, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::int::Int::__str__(::Int)', symObjAddr: 0x2E48, symBinAddr: 0x100006268, symSize: 0x3C }
  - { offsetInCU: 0x1A, offset: 0x7776, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::int::Int::__repr__(::Int)', symObjAddr: 0x2E84, symBinAddr: 0x1000062A4, symSize: 0x4 }
  - { offsetInCU: 0x27, offset: 0x7783, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::int::Int::__repr__(::Int)', symObjAddr: 0x2E84, symBinAddr: 0x1000062A4, symSize: 0x4 }
  - { offsetInCU: 0x1A, offset: 0x7844, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::io::_flush(::FileDescriptor)', symObjAddr: 0x2E88, symBinAddr: 0x1000062A8, symSize: 0x30 }
  - { offsetInCU: 0x154, offset: 0x797E, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::io::_flush(::FileDescriptor)', symObjAddr: 0x2E88, symBinAddr: 0x1000062A8, symSize: 0x30 }
  - { offsetInCU: 0x1A, offset: 0x7A92, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::io::print[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],::Bool,::FileDescriptor),Ts=[[typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}]]', symObjAddr: 0x2EB8, symBinAddr: 0x1000062D8, symSize: 0x8C }
  - { offsetInCU: 0x45A, offset: 0x7ED2, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::io::print[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],::Bool,::FileDescriptor),Ts=[[typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}]]', symObjAddr: 0x2EB8, symBinAddr: 0x1000062D8, symSize: 0x8C }
  - { offsetInCU: 0x1A, offset: 0x814C, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::io::print[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],::Bool,::FileDescriptor),Ts=[[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_to" : <type>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"stdlib::collections::string::String::write_to[stdlib::utils::write::Writer](stdlib::collections::string::String,$0&)"<:type ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]]', symObjAddr: 0x2F44, symBinAddr: 0x100006364, symSize: 0x98 }
  - { offsetInCU: 0x4A8, offset: 0x85DA, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::io::print[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],::Bool,::FileDescriptor),Ts=[[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_to" : <type>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"stdlib::collections::string::String::write_to[stdlib::utils::write::Writer](stdlib::collections::string::String,$0&)"<:type ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]]', symObjAddr: 0x2F44, symBinAddr: 0x100006364, symSize: 0x98 }
  - { offsetInCU: 0x1A, offset: 0x8847, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::__str__(::SIMD[$0, $1]),type=si32,size=1', symObjAddr: 0x2FDC, symBinAddr: 0x1000063FC, symSize: 0x3C }
  - { offsetInCU: 0x27, offset: 0x8854, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::__str__(::SIMD[$0, $1]),type=si32,size=1', symObjAddr: 0x2FDC, symBinAddr: 0x1000063FC, symSize: 0x3C }
  - { offsetInCU: 0x1A, offset: 0x892F, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::__str__(::SIMD[$0, $1]),type=ui16,size=1', symObjAddr: 0x3018, symBinAddr: 0x100006438, symSize: 0x3C }
  - { offsetInCU: 0x27, offset: 0x893C, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::__str__(::SIMD[$0, $1]),type=ui16,size=1', symObjAddr: 0x3018, symBinAddr: 0x100006438, symSize: 0x3C }
  - { offsetInCU: 0x1A, offset: 0x8A17, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::__repr__(::SIMD[$0, $1]),type=ui16,size=1', symObjAddr: 0x3054, symBinAddr: 0x100006474, symSize: 0x20C }
  - { offsetInCU: 0xCE4, offset: 0x96E1, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::__repr__(::SIMD[$0, $1]),type=ui16,size=1', symObjAddr: 0x3054, symBinAddr: 0x100006474, symSize: 0x20C }
  - { offsetInCU: 0x1A, offset: 0xA351, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::write_to[stdlib::utils::write::Writer](::SIMD[$0, $1],$2&),type=si32,size=1,W=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_bytes" : <i1>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::collections::string::String::write_bytes[::Bool,::Origin[$0]](stdlib::collections::string::String&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::write[*stdlib::utils::write::Writable](stdlib::collections::string::String&,*$0)"<:variadic<type> ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]', symObjAddr: 0x3260, symBinAddr: 0x100006680, symSize: 0x1EC }
  - { offsetInCU: 0x9EC, offset: 0xAD23, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::write_to[stdlib::utils::write::Writer](::SIMD[$0, $1],$2&),type=si32,size=1,W=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_bytes" : <i1>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::collections::string::String::write_bytes[::Bool,::Origin[$0]](stdlib::collections::string::String&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::write[*stdlib::utils::write::Writable](stdlib::collections::string::String&,*$0)"<:variadic<type> ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]', symObjAddr: 0x3260, symBinAddr: 0x100006680, symSize: 0x1EC }
  - { offsetInCU: 0x1A, offset: 0xB648, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::write_to[stdlib::utils::write::Writer](::SIMD[$0, $1],$2&),type=si64,size=1,W=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_bytes" : <i1>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::collections::string::String::write_bytes[::Bool,::Origin[$0]](stdlib::collections::string::String&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::write[*stdlib::utils::write::Writable](stdlib::collections::string::String&,*$0)"<:variadic<type> ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]', symObjAddr: 0x344C, symBinAddr: 0x10000686C, symSize: 0x1EC }
  - { offsetInCU: 0xA11, offset: 0xC03F, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::write_to[stdlib::utils::write::Writer](::SIMD[$0, $1],$2&),type=si64,size=1,W=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_bytes" : <i1>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::collections::string::String::write_bytes[::Bool,::Origin[$0]](stdlib::collections::string::String&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::write[*stdlib::utils::write::Writable](stdlib::collections::string::String&,*$0)"<:variadic<type> ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]', symObjAddr: 0x344C, symBinAddr: 0x10000686C, symSize: 0x1EC }
  - { offsetInCU: 0x1A, offset: 0xC9CC, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::write_to[stdlib::utils::write::Writer](::SIMD[$0, $1],$2&),type=si64,size=1,W=[typevalue<#kgen.typeref<_"stdlib::utils::write::_WriteBufferStack,W=[typevalue<#kgen.typeref<_\22stdlib::builtin::file_descriptor::FileDescriptor\22>>, index, {\22__moveinit__\22 : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _\22stdlib::builtin::file_descriptor::FileDescriptor::__moveinit__(::FileDescriptor=&,::FileDescriptor)_thunk\22, \22__del__\22 : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _\22stdlib::builtin::file_descriptor::FileDescriptor::__del__(::FileDescriptor)_thunk\22, \22write_bytes\22 : <i1>(!kgen.pointer<index> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _\22stdlib::builtin::file_descriptor::FileDescriptor::write_bytes[::Bool,::Origin[$0]](::FileDescriptor&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])\22<:i1 ?>, \22write\22 : <variadic<type>>(!kgen.pointer<index> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _\22stdlib::builtin::file_descriptor::FileDescriptor::write[*stdlib::utils::write::Writable](::FileDescriptor&,*$0)\22<:variadic<type> ?>}],capacity=4096">>, struct<(struct<(array<4096, scalar<ui8>>) memoryOnly>, index, index) memoryOnly>, {"write_bytes" : <i1>(!kgen.pointer<struct<(struct<(array<4096, scalar<ui8>>) memoryOnly>, index, index) memoryOnly>> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::utils::write::_WriteBufferStack::write_bytes[::Bool,::Origin[$2]](stdlib::utils::write::_WriteBufferStack[$0, $1]&,stdlib::memory::span::Span[$2, ::SIMD[{uint8}, {1}], $3])"<:type [typevalue<#kgen.typeref<_"stdlib::builtin::file_descriptor::FileDescriptor">>, index, {"__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__moveinit__(::FileDescriptor=&,::FileDescriptor)_thunk", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__del__(::FileDescriptor)_thunk", "write_bytes" : <i1>(!kgen.pointer<index> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write_bytes[::Bool,::Origin[$0]](::FileDescriptor&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<index> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write[*stdlib::utils::write::Writable](::FileDescriptor&,*$0)"<:variadic<type> ?>}], 4096, :i1 ?>, "write" : <variadic<type>>(!kgen.pointer<struct<(struct<(array<4096, scalar<ui8>>) memoryOnly>, index, index) memoryOnly>> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::utils::write::_WriteBufferStack::write[*stdlib::utils::write::Writable](stdlib::utils::write::_WriteBufferStack[$0, $1]&,*$2)"<:type [typevalue<#kgen.typeref<_"stdlib::builtin::file_descriptor::FileDescriptor">>, index, {"__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__moveinit__(::FileDescriptor=&,::FileDescriptor)_thunk", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__del__(::FileDescriptor)_thunk", "write_bytes" : <i1>(!kgen.pointer<index> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write_bytes[::Bool,::Origin[$0]](::FileDescriptor&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<index> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write[*stdlib::utils::write::Writable](::FileDescriptor&,*$0)"<:variadic<type> ?>}], 4096, :variadic<type> ?>, "__del__" : (!kgen.pointer<struct<(struct<(array<4096, scalar<ui8>>) memoryOnly>, index, index) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::write::_WriteBufferStack::__del__(stdlib::utils::write::_WriteBufferStack[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::builtin::file_descriptor::FileDescriptor">>, index, {"__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__moveinit__(::FileDescriptor=&,::FileDescriptor)_thunk", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__del__(::FileDescriptor)_thunk", "write_bytes" : <i1>(!kgen.pointer<index> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write_bytes[::Bool,::Origin[$0]](::FileDescriptor&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<index> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write[*stdlib::utils::write::Writable](::FileDescriptor&,*$0)"<:variadic<type> ?>}], 4096>}]', symObjAddr: 0x3638, symBinAddr: 0x100006A58, symSize: 0x2B0 }
  - { offsetInCU: 0xABF, offset: 0xD471, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::write_to[stdlib::utils::write::Writer](::SIMD[$0, $1],$2&),type=si64,size=1,W=[typevalue<#kgen.typeref<_"stdlib::utils::write::_WriteBufferStack,W=[typevalue<#kgen.typeref<_\22stdlib::builtin::file_descriptor::FileDescriptor\22>>, index, {\22__moveinit__\22 : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _\22stdlib::builtin::file_descriptor::FileDescriptor::__moveinit__(::FileDescriptor=&,::FileDescriptor)_thunk\22, \22__del__\22 : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _\22stdlib::builtin::file_descriptor::FileDescriptor::__del__(::FileDescriptor)_thunk\22, \22write_bytes\22 : <i1>(!kgen.pointer<index> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _\22stdlib::builtin::file_descriptor::FileDescriptor::write_bytes[::Bool,::Origin[$0]](::FileDescriptor&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])\22<:i1 ?>, \22write\22 : <variadic<type>>(!kgen.pointer<index> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _\22stdlib::builtin::file_descriptor::FileDescriptor::write[*stdlib::utils::write::Writable](::FileDescriptor&,*$0)\22<:variadic<type> ?>}],capacity=4096">>, struct<(struct<(array<4096, scalar<ui8>>) memoryOnly>, index, index) memoryOnly>, {"write_bytes" : <i1>(!kgen.pointer<struct<(struct<(array<4096, scalar<ui8>>) memoryOnly>, index, index) memoryOnly>> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::utils::write::_WriteBufferStack::write_bytes[::Bool,::Origin[$2]](stdlib::utils::write::_WriteBufferStack[$0, $1]&,stdlib::memory::span::Span[$2, ::SIMD[{uint8}, {1}], $3])"<:type [typevalue<#kgen.typeref<_"stdlib::builtin::file_descriptor::FileDescriptor">>, index, {"__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__moveinit__(::FileDescriptor=&,::FileDescriptor)_thunk", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__del__(::FileDescriptor)_thunk", "write_bytes" : <i1>(!kgen.pointer<index> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write_bytes[::Bool,::Origin[$0]](::FileDescriptor&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<index> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write[*stdlib::utils::write::Writable](::FileDescriptor&,*$0)"<:variadic<type> ?>}], 4096, :i1 ?>, "write" : <variadic<type>>(!kgen.pointer<struct<(struct<(array<4096, scalar<ui8>>) memoryOnly>, index, index) memoryOnly>> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::utils::write::_WriteBufferStack::write[*stdlib::utils::write::Writable](stdlib::utils::write::_WriteBufferStack[$0, $1]&,*$2)"<:type [typevalue<#kgen.typeref<_"stdlib::builtin::file_descriptor::FileDescriptor">>, index, {"__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__moveinit__(::FileDescriptor=&,::FileDescriptor)_thunk", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__del__(::FileDescriptor)_thunk", "write_bytes" : <i1>(!kgen.pointer<index> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write_bytes[::Bool,::Origin[$0]](::FileDescriptor&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<index> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write[*stdlib::utils::write::Writable](::FileDescriptor&,*$0)"<:variadic<type> ?>}], 4096, :variadic<type> ?>, "__del__" : (!kgen.pointer<struct<(struct<(array<4096, scalar<ui8>>) memoryOnly>, index, index) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::write::_WriteBufferStack::__del__(stdlib::utils::write::_WriteBufferStack[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::builtin::file_descriptor::FileDescriptor">>, index, {"__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__moveinit__(::FileDescriptor=&,::FileDescriptor)_thunk", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__del__(::FileDescriptor)_thunk", "write_bytes" : <i1>(!kgen.pointer<index> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write_bytes[::Bool,::Origin[$0]](::FileDescriptor&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<index> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write[*stdlib::utils::write::Writable](::FileDescriptor&,*$0)"<:variadic<type> ?>}], 4096>}]', symObjAddr: 0x3638, symBinAddr: 0x100006A58, symSize: 0x2B0 }
  - { offsetInCU: 0x1A, offset: 0xDD06, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::write_to[stdlib::utils::write::Writer](::SIMD[$0, $1],$2&),type=ui16,size=1,W=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_bytes" : <i1>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::collections::string::String::write_bytes[::Bool,::Origin[$0]](stdlib::collections::string::String&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::write[*stdlib::utils::write::Writable](stdlib::collections::string::String&,*$0)"<:variadic<type> ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]', symObjAddr: 0x38E8, symBinAddr: 0x100006D08, symSize: 0x110 }
  - { offsetInCU: 0x830, offset: 0xE51C, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::simd::SIMD::write_to[stdlib::utils::write::Writer](::SIMD[$0, $1],$2&),type=ui16,size=1,W=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_bytes" : <i1>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::collections::string::String::write_bytes[::Bool,::Origin[$0]](stdlib::collections::string::String&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::write[*stdlib::utils::write::Writable](stdlib::collections::string::String&,*$0)"<:variadic<type> ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]', symObjAddr: 0x38E8, symBinAddr: 0x100006D08, symSize: 0x110 }
  - { offsetInCU: 0x1A, offset: 0xEADF, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::builtin::error::Error">>, struct<(pointer<none>, index)>, {"__str__" : (!kgen.pointer<struct<(pointer<none>, index)>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"stdlib::builtin::error::Error::__str__(::Error)", "__del__" : (!kgen.pointer<struct<(pointer<none>, index)>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::error::Error::__del__(::Error)"}]', symObjAddr: 0x39F8, symBinAddr: 0x100006E18, symSize: 0x4 }
  - { offsetInCU: 0x27, offset: 0xEAEC, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::builtin::error::Error">>, struct<(pointer<none>, index)>, {"__str__" : (!kgen.pointer<struct<(pointer<none>, index)>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"stdlib::builtin::error::Error::__str__(::Error)", "__del__" : (!kgen.pointer<struct<(pointer<none>, index)>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::error::Error::__del__(::Error)"}]', symObjAddr: 0x39F8, symBinAddr: 0x100006E18, symSize: 0x4 }
  - { offsetInCU: 0x1A, offset: 0xEBD7, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"__str__" : (!kgen.pointer<index> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::Int) -> stdlib::collections::string::String|fn(::Int) -> stdlib::collections::string::String|4tjQxKvxCvNodhegK6dE2amy9xqmKITK5YwVlYygFAQ=[fn(::Int) -> stdlib::collections::string::String](::Int)"<:(index, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::int::Int::__str__(::Int)">, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}]', symObjAddr: 0x39FC, symBinAddr: 0x100006E1C, symSize: 0x4 }
  - { offsetInCU: 0x27, offset: 0xEBE4, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"__str__" : (!kgen.pointer<index> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::Int) -> stdlib::collections::string::String|fn(::Int) -> stdlib::collections::string::String|4tjQxKvxCvNodhegK6dE2amy9xqmKITK5YwVlYygFAQ=[fn(::Int) -> stdlib::collections::string::String](::Int)"<:(index, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::int::Int::__str__(::Int)">, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}]', symObjAddr: 0x39FC, symBinAddr: 0x100006E1C, symSize: 0x4 }
  - { offsetInCU: 0x1A, offset: 0xECA2, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=si32,size=1">>, scalar<si32>, {"__str__" : (!kgen.pointer<scalar<si32>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::SIMD[{int32}, {1}]) -> stdlib::collections::string::String|fn(::SIMD[{int32}, {1}]) -> stdlib::collections::string::String|FOWFUJViTiuBRRiU0ac1057FeFPfNx6p2SlE2vdmjyc=[fn(::SIMD[{int32}, {1}]) -> stdlib::collections::string::String](::SIMD[{int32}, {1}])"<:(!pop.scalar<si32>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::simd::SIMD::__str__(::SIMD[$0, $1])"<:dtype si32, 1>>, "__del__" : (!kgen.pointer<scalar<si32>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype si32, 1>}]', symObjAddr: 0x3A00, symBinAddr: 0x100006E20, symSize: 0x4 }
  - { offsetInCU: 0x27, offset: 0xECAF, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=si32,size=1">>, scalar<si32>, {"__str__" : (!kgen.pointer<scalar<si32>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::SIMD[{int32}, {1}]) -> stdlib::collections::string::String|fn(::SIMD[{int32}, {1}]) -> stdlib::collections::string::String|FOWFUJViTiuBRRiU0ac1057FeFPfNx6p2SlE2vdmjyc=[fn(::SIMD[{int32}, {1}]) -> stdlib::collections::string::String](::SIMD[{int32}, {1}])"<:(!pop.scalar<si32>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::simd::SIMD::__str__(::SIMD[$0, $1])"<:dtype si32, 1>>, "__del__" : (!kgen.pointer<scalar<si32>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype si32, 1>}]', symObjAddr: 0x3A00, symBinAddr: 0x100006E20, symSize: 0x4 }
  - { offsetInCU: 0x1A, offset: 0xED84, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=ui16,size=1">>, scalar<ui16>, {"__str__" : (!kgen.pointer<scalar<ui16>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String|fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String|281xsG9f5n1fmkSQhP1V7kgU9EPLOTFQx7+o4zrn3Gs=[fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String](::SIMD[{uint16}, {1}])"<:(!pop.scalar<ui16>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::simd::SIMD::__str__(::SIMD[$0, $1])"<:dtype ui16, 1>>, "__del__" : (!kgen.pointer<scalar<ui16>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype ui16, 1>}]', symObjAddr: 0x3A04, symBinAddr: 0x100006E24, symSize: 0x4 }
  - { offsetInCU: 0x27, offset: 0xED91, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=ui16,size=1">>, scalar<ui16>, {"__str__" : (!kgen.pointer<scalar<ui16>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String|fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String|281xsG9f5n1fmkSQhP1V7kgU9EPLOTFQx7+o4zrn3Gs=[fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String](::SIMD[{uint16}, {1}])"<:(!pop.scalar<ui16>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::simd::SIMD::__str__(::SIMD[$0, $1])"<:dtype ui16, 1>>, "__del__" : (!kgen.pointer<scalar<ui16>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype ui16, 1>}]', symObjAddr: 0x3A04, symBinAddr: 0x100006E24, symSize: 0x4 }
  - { offsetInCU: 0x1A, offset: 0xEE66, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"__str__" : (!kgen.pointer<string> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::StringLiteral) -> stdlib::collections::string::String|fn(::StringLiteral) -> stdlib::collections::string::String|ORmdHkg88CKPvns9QdrL8WiOINmBOq5u4jV7xxlKVjs=[fn(::StringLiteral) -> stdlib::collections::string::String](::StringLiteral)"<:(!kgen.string, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::__str__(::StringLiteral)">, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}]', symObjAddr: 0x3A08, symBinAddr: 0x100006E28, symSize: 0x4 }
  - { offsetInCU: 0x27, offset: 0xEE73, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"__str__" : (!kgen.pointer<string> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::StringLiteral) -> stdlib::collections::string::String|fn(::StringLiteral) -> stdlib::collections::string::String|ORmdHkg88CKPvns9QdrL8WiOINmBOq5u4jV7xxlKVjs=[fn(::StringLiteral) -> stdlib::collections::string::String](::StringLiteral)"<:(!kgen.string, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::__str__(::StringLiteral)">, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}]', symObjAddr: 0x3A08, symBinAddr: 0x100006E28, symSize: 0x4 }
  - { offsetInCU: 0x1A, offset: 0xEF5B, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__str__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"stdlib::collections::string::String::__str__(stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]', symObjAddr: 0x3A0C, symBinAddr: 0x100006E2C, symSize: 0x10 }
  - { offsetInCU: 0xBC, offset: 0xEFFD, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__str__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"stdlib::collections::string::String::__str__(stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]', symObjAddr: 0x3A0C, symBinAddr: 0x100006E2C, symSize: 0x10 }
  - { offsetInCU: 0x1A, offset: 0xF0CA, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::utils::string_slice::StringSlice,is_mutable=0,origin={  }">>, struct<(pointer<none>, index)>, {"__str__" : (!kgen.pointer<struct<(pointer<none>, index)>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]) -> stdlib::collections::string::String|fn(stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]) -> stdlib::collections::string::String|9ZaqokIXDCIf/X1MLh+fdutj+9OkSqmABy0AmteOkWo=[fn(stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]) -> stdlib::collections::string::String](stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}])"<:(!kgen.struct<(pointer<none>, index)>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::utils::string_slice::StringSlice::__str__(stdlib::utils::string_slice::StringSlice[$0, $1])"<:i1 0>>, "__del__" : (!kgen.pointer<struct<(pointer<none>, index)>> owned_in_mem) -> !kgen.none = _"stdlib::utils::string_slice::StringSlice::__del__(stdlib::utils::string_slice::StringSlice[$0, $1])_thunk"<:i1 0>}]', symObjAddr: 0x3A1C, symBinAddr: 0x100006E3C, symSize: 0x4 }
  - { offsetInCU: 0x27, offset: 0xF0D7, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::utils::string_slice::StringSlice,is_mutable=0,origin={  }">>, struct<(pointer<none>, index)>, {"__str__" : (!kgen.pointer<struct<(pointer<none>, index)>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]) -> stdlib::collections::string::String|fn(stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]) -> stdlib::collections::string::String|9ZaqokIXDCIf/X1MLh+fdutj+9OkSqmABy0AmteOkWo=[fn(stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]) -> stdlib::collections::string::String](stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}])"<:(!kgen.struct<(pointer<none>, index)>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::utils::string_slice::StringSlice::__str__(stdlib::utils::string_slice::StringSlice[$0, $1])"<:i1 0>>, "__del__" : (!kgen.pointer<struct<(pointer<none>, index)>> owned_in_mem) -> !kgen.none = _"stdlib::utils::string_slice::StringSlice::__del__(stdlib::utils::string_slice::StringSlice[$0, $1])_thunk"<:i1 0>}]', symObjAddr: 0x3A1C, symBinAddr: 0x100006E3C, symSize: 0x4 }
  - { offsetInCU: 0x1A, offset: 0xF1C2, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::utils::string_slice::StringSlice,is_mutable=0,origin={  }">>, struct<(pointer<none>, index)>, {"__str__" : (!kgen.pointer<struct<(pointer<none>, index)>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn[::Bool, ::Origin[$0]](stdlib::utils::string_slice::StringSlice[$0, $1]) -> stdlib::collections::string::String|fn(stdlib::utils::string_slice::StringSlice[$1|0, $1|1]) -> stdlib::collections::string::String|j+CFZcPmEVztWip1hDQM7ty8NUI4crEQXsivVDLNsL8=[::Bool,::Origin[$0],fn(stdlib::utils::string_slice::StringSlice[$1|0, $1|1]) -> stdlib::collections::string::String](stdlib::utils::string_slice::StringSlice[$0, $1])"<:i1 0, :(!kgen.struct<(pointer<none>, index)>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::utils::string_slice::StringSlice::__str__(stdlib::utils::string_slice::StringSlice[$0, $1])"<:i1 0>>, "__del__" : (!kgen.pointer<struct<(pointer<none>, index)>> owned_in_mem) -> !kgen.none = _"stdlib::utils::string_slice::StringSlice::__del__(stdlib::utils::string_slice::StringSlice[$0, $1])_thunk"<:i1 0>}]', symObjAddr: 0x3A20, symBinAddr: 0x100006E40, symSize: 0x4 }
  - { offsetInCU: 0x27, offset: 0xF1CF, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::utils::string_slice::StringSlice,is_mutable=0,origin={  }">>, struct<(pointer<none>, index)>, {"__str__" : (!kgen.pointer<struct<(pointer<none>, index)>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn[::Bool, ::Origin[$0]](stdlib::utils::string_slice::StringSlice[$0, $1]) -> stdlib::collections::string::String|fn(stdlib::utils::string_slice::StringSlice[$1|0, $1|1]) -> stdlib::collections::string::String|j+CFZcPmEVztWip1hDQM7ty8NUI4crEQXsivVDLNsL8=[::Bool,::Origin[$0],fn(stdlib::utils::string_slice::StringSlice[$1|0, $1|1]) -> stdlib::collections::string::String](stdlib::utils::string_slice::StringSlice[$0, $1])"<:i1 0, :(!kgen.struct<(pointer<none>, index)>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::utils::string_slice::StringSlice::__str__(stdlib::utils::string_slice::StringSlice[$0, $1])"<:i1 0>>, "__del__" : (!kgen.pointer<struct<(pointer<none>, index)>> owned_in_mem) -> !kgen.none = _"stdlib::utils::string_slice::StringSlice::__del__(stdlib::utils::string_slice::StringSlice[$0, $1])_thunk"<:i1 0>}]', symObjAddr: 0x3A20, symBinAddr: 0x100006E40, symSize: 0x4 }
  - { offsetInCU: 0x1A, offset: 0xF2BA, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::utils::string_slice::StringSlice,is_mutable=0,origin={  }">>, struct<(pointer<none>, index)>, {"__str__" : (!kgen.pointer<struct<(pointer<none>, index)>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn[MutableOrigin](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $0)}]) -> stdlib::collections::string::String|fn(stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $1|0)}]) -> stdlib::collections::string::String|z8i+i7BwyLiXMMjBqfl3meRhGUzUIjUsQgxuyJl9hoI=[MutableOrigin,fn(stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $1|0)}]) -> stdlib::collections::string::String](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $0)}])"<:(!kgen.struct<(pointer<none>, index)>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::utils::string_slice::StringSlice::__str__(stdlib::utils::string_slice::StringSlice[$0, $1])"<:i1 0>>, "__del__" : (!kgen.pointer<struct<(pointer<none>, index)>> owned_in_mem) -> !kgen.none = _"stdlib::utils::string_slice::StringSlice::__del__(stdlib::utils::string_slice::StringSlice[$0, $1])_thunk"<:i1 0>}]', symObjAddr: 0x3A24, symBinAddr: 0x100006E44, symSize: 0x4 }
  - { offsetInCU: 0x27, offset: 0xF2C7, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"stdlib::utils::string_slice::StringSlice,is_mutable=0,origin={  }">>, struct<(pointer<none>, index)>, {"__str__" : (!kgen.pointer<struct<(pointer<none>, index)>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn[MutableOrigin](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $0)}]) -> stdlib::collections::string::String|fn(stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $1|0)}]) -> stdlib::collections::string::String|z8i+i7BwyLiXMMjBqfl3meRhGUzUIjUsQgxuyJl9hoI=[MutableOrigin,fn(stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $1|0)}]) -> stdlib::collections::string::String](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $0)}])"<:(!kgen.struct<(pointer<none>, index)>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::utils::string_slice::StringSlice::__str__(stdlib::utils::string_slice::StringSlice[$0, $1])"<:i1 0>>, "__del__" : (!kgen.pointer<struct<(pointer<none>, index)>> owned_in_mem) -> !kgen.none = _"stdlib::utils::string_slice::StringSlice::__del__(stdlib::utils::string_slice::StringSlice[$0, $1])_thunk"<:i1 0>}]', symObjAddr: 0x3A24, symBinAddr: 0x100006E44, symSize: 0x4 }
  - { offsetInCU: 0x1A, offset: 0xF3B2, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"weave::bytes::ByteWriter">>, struct<(pointer<none>, index, index, index) memoryOnly>, {"__str__" : (!kgen.pointer<struct<(pointer<none>, index, index, index) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"weave::bytes::ByteWriter::__str__(weave::bytes::ByteWriter)", "__del__" : (!kgen.pointer<struct<(pointer<none>, index, index, index) memoryOnly>> owned_in_mem) -> !kgen.none = _"weave::bytes::ByteWriter::__del__(weave::bytes::ByteWriter)"}]', symObjAddr: 0x3A28, symBinAddr: 0x100006E48, symSize: 0x20 }
  - { offsetInCU: 0xED, offset: 0xF485, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::str::str[::Stringable]($0),T=[typevalue<#kgen.typeref<_"weave::bytes::ByteWriter">>, struct<(pointer<none>, index, index, index) memoryOnly>, {"__str__" : (!kgen.pointer<struct<(pointer<none>, index, index, index) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"weave::bytes::ByteWriter::__str__(weave::bytes::ByteWriter)", "__del__" : (!kgen.pointer<struct<(pointer<none>, index, index, index) memoryOnly>> owned_in_mem) -> !kgen.none = _"weave::bytes::ByteWriter::__del__(weave::bytes::ByteWriter)"}]', symObjAddr: 0x3A28, symBinAddr: 0x100006E48, symSize: 0x20 }
  - { offsetInCU: 0x1A, offset: 0xF547, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::string_literal::StringLiteral::__str__(::StringLiteral)', symObjAddr: 0x3A48, symBinAddr: 0x100006E68, symSize: 0x114 }
  - { offsetInCU: 0x417, offset: 0xF944, size: 0x8, addend: 0x0, symName: '_stdlib::builtin::string_literal::StringLiteral::__str__(::StringLiteral)', symObjAddr: 0x3A48, symBinAddr: 0x100006E68, symSize: 0x114 }
  - { offsetInCU: 0x1A, offset: 0xFD5A, size: 0x8, addend: 0x0, symName: '_stdlib::collections::dict::DictEntry::__init__(stdlib::collections::dict::DictEntry[$0, $1]=&,$0,$1),K=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}],V=[typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]', symObjAddr: 0x3B5C, symBinAddr: 0x100006F7C, symSize: 0x290 }
  - { offsetInCU: 0x62B, offset: 0x1036B, size: 0x8, addend: 0x0, symName: '_stdlib::collections::dict::DictEntry::__init__(stdlib::collections::dict::DictEntry[$0, $1]=&,$0,$1),K=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}],V=[typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]', symObjAddr: 0x3B5C, symBinAddr: 0x100006F7C, symSize: 0x290 }
  - { offsetInCU: 0x1A, offset: 0x1084A, size: 0x8, addend: 0x0, symName: '_stdlib::collections::dict::Dict::get(stdlib::collections::dict::Dict[$0, $1],$0,$1),K=[typevalue<#kgen.typeref<_"banjo::key::KeyType">>, index, {"__copyinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> read_mem) -> !kgen.none = _"banjo::key::KeyType::__copyinit__(banjo::key::KeyType=&,banjo::key::KeyType)", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"banjo::key::KeyType::__del__(banjo::key::KeyType)", "__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"banjo::key::KeyType::__moveinit__(banjo::key::KeyType=&,banjo::key::KeyType)_thunk", "__hash__" : (!kgen.pointer<index> read_mem) -> index = _"banjo::key::KeyType::__hash__(banjo::key::KeyType)", "__eq__" : (!kgen.pointer<index> read_mem, !kgen.pointer<index> read_mem) -> i1 = _"banjo::key::KeyType::__eq__(banjo::key::KeyType,banjo::key::KeyType)", "__ne__" : (!kgen.pointer<index> read_mem, !kgen.pointer<index> read_mem) -> i1 = _"banjo::key::KeyType::__ne__(banjo::key::KeyType,banjo::key::KeyType)"}],V=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)"}]', symObjAddr: 0x3DEC, symBinAddr: 0x10000720C, symSize: 0xE0 }
  - { offsetInCU: 0x74E, offset: 0x10F7E, size: 0x8, addend: 0x0, symName: '_stdlib::collections::dict::Dict::get(stdlib::collections::dict::Dict[$0, $1],$0,$1),K=[typevalue<#kgen.typeref<_"banjo::key::KeyType">>, index, {"__copyinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> read_mem) -> !kgen.none = _"banjo::key::KeyType::__copyinit__(banjo::key::KeyType=&,banjo::key::KeyType)", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"banjo::key::KeyType::__del__(banjo::key::KeyType)", "__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"banjo::key::KeyType::__moveinit__(banjo::key::KeyType=&,banjo::key::KeyType)_thunk", "__hash__" : (!kgen.pointer<index> read_mem) -> index = _"banjo::key::KeyType::__hash__(banjo::key::KeyType)", "__eq__" : (!kgen.pointer<index> read_mem, !kgen.pointer<index> read_mem) -> i1 = _"banjo::key::KeyType::__eq__(banjo::key::KeyType,banjo::key::KeyType)", "__ne__" : (!kgen.pointer<index> read_mem, !kgen.pointer<index> read_mem) -> i1 = _"banjo::key::KeyType::__ne__(banjo::key::KeyType,banjo::key::KeyType)"}],V=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)"}]', symObjAddr: 0x3DEC, symBinAddr: 0x10000720C, symSize: 0xE0 }
  - { offsetInCU: 0x1A, offset: 0x1139B, size: 0x8, addend: 0x0, symName: '_stdlib::collections::dict::Dict::_insert[::Bool](stdlib::collections::dict::Dict[$0, $1]&,stdlib::collections::dict::DictEntry[$0, $1]),K=[typevalue<#kgen.typeref<_"banjo::key::KeyType">>, index, {"__copyinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> read_mem) -> !kgen.none = _"banjo::key::KeyType::__copyinit__(banjo::key::KeyType=&,banjo::key::KeyType)", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"banjo::key::KeyType::__del__(banjo::key::KeyType)", "__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"banjo::key::KeyType::__moveinit__(banjo::key::KeyType=&,banjo::key::KeyType)_thunk", "__hash__" : (!kgen.pointer<index> read_mem) -> index = _"banjo::key::KeyType::__hash__(banjo::key::KeyType)", "__eq__" : (!kgen.pointer<index> read_mem, !kgen.pointer<index> read_mem) -> i1 = _"banjo::key::KeyType::__eq__(banjo::key::KeyType,banjo::key::KeyType)", "__ne__" : (!kgen.pointer<index> read_mem, !kgen.pointer<index> read_mem) -> i1 = _"banjo::key::KeyType::__ne__(banjo::key::KeyType,banjo::key::KeyType)"}],V=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)"}],safe_context=0', symObjAddr: 0x3ECC, symBinAddr: 0x1000072EC, symSize: 0x844 }
  - { offsetInCU: 0xEDF, offset: 0x12260, size: 0x8, addend: 0x0, symName: '_stdlib::collections::dict::Dict::_insert[::Bool](stdlib::collections::dict::Dict[$0, $1]&,stdlib::collections::dict::DictEntry[$0, $1]),K=[typevalue<#kgen.typeref<_"banjo::key::KeyType">>, index, {"__copyinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> read_mem) -> !kgen.none = _"banjo::key::KeyType::__copyinit__(banjo::key::KeyType=&,banjo::key::KeyType)", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"banjo::key::KeyType::__del__(banjo::key::KeyType)", "__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"banjo::key::KeyType::__moveinit__(banjo::key::KeyType=&,banjo::key::KeyType)_thunk", "__hash__" : (!kgen.pointer<index> read_mem) -> index = _"banjo::key::KeyType::__hash__(banjo::key::KeyType)", "__eq__" : (!kgen.pointer<index> read_mem, !kgen.pointer<index> read_mem) -> i1 = _"banjo::key::KeyType::__eq__(banjo::key::KeyType,banjo::key::KeyType)", "__ne__" : (!kgen.pointer<index> read_mem, !kgen.pointer<index> read_mem) -> i1 = _"banjo::key::KeyType::__ne__(banjo::key::KeyType,banjo::key::KeyType)"}],V=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)"}],safe_context=0', symObjAddr: 0x3ECC, symBinAddr: 0x1000072EC, symSize: 0x844 }
  - { offsetInCU: 0x1A, offset: 0x13651, size: 0x8, addend: 0x0, symName: '_stdlib::collections::dict::Dict::_insert[::Bool](stdlib::collections::dict::Dict[$0, $1]&,stdlib::collections::dict::DictEntry[$0, $1]),K=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}],V=[typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}],safe_context=0', symObjAddr: 0x4710, symBinAddr: 0x100007B30, symSize: 0x8E4 }
  - { offsetInCU: 0xEF9, offset: 0x14530, size: 0x8, addend: 0x0, symName: '_stdlib::collections::dict::Dict::_insert[::Bool](stdlib::collections::dict::Dict[$0, $1]&,stdlib::collections::dict::DictEntry[$0, $1]),K=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}],V=[typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}],safe_context=0', symObjAddr: 0x4710, symBinAddr: 0x100007B30, symSize: 0x8E4 }
  - { offsetInCU: 0x1A, offset: 0x15902, size: 0x8, addend: 0x0, symName: '_stdlib::collections::dict::Dict::_find_index(stdlib::collections::dict::Dict[$0, $1],::Int,$0),K=[typevalue<#kgen.typeref<_"banjo::key::KeyType">>, index, {"__copyinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> read_mem) -> !kgen.none = _"banjo::key::KeyType::__copyinit__(banjo::key::KeyType=&,banjo::key::KeyType)", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"banjo::key::KeyType::__del__(banjo::key::KeyType)", "__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"banjo::key::KeyType::__moveinit__(banjo::key::KeyType=&,banjo::key::KeyType)_thunk", "__hash__" : (!kgen.pointer<index> read_mem) -> index = _"banjo::key::KeyType::__hash__(banjo::key::KeyType)", "__eq__" : (!kgen.pointer<index> read_mem, !kgen.pointer<index> read_mem) -> i1 = _"banjo::key::KeyType::__eq__(banjo::key::KeyType,banjo::key::KeyType)", "__ne__" : (!kgen.pointer<index> read_mem, !kgen.pointer<index> read_mem) -> i1 = _"banjo::key::KeyType::__ne__(banjo::key::KeyType,banjo::key::KeyType)"}],V=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)"}]', symObjAddr: 0x4FF4, symBinAddr: 0x100008414, symSize: 0x17C }
  - { offsetInCU: 0x5B5, offset: 0x15E9D, size: 0x8, addend: 0x0, symName: '_stdlib::collections::dict::Dict::_find_index(stdlib::collections::dict::Dict[$0, $1],::Int,$0),K=[typevalue<#kgen.typeref<_"banjo::key::KeyType">>, index, {"__copyinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> read_mem) -> !kgen.none = _"banjo::key::KeyType::__copyinit__(banjo::key::KeyType=&,banjo::key::KeyType)", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"banjo::key::KeyType::__del__(banjo::key::KeyType)", "__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"banjo::key::KeyType::__moveinit__(banjo::key::KeyType=&,banjo::key::KeyType)_thunk", "__hash__" : (!kgen.pointer<index> read_mem) -> index = _"banjo::key::KeyType::__hash__(banjo::key::KeyType)", "__eq__" : (!kgen.pointer<index> read_mem, !kgen.pointer<index> read_mem) -> i1 = _"banjo::key::KeyType::__eq__(banjo::key::KeyType,banjo::key::KeyType)", "__ne__" : (!kgen.pointer<index> read_mem, !kgen.pointer<index> read_mem) -> i1 = _"banjo::key::KeyType::__ne__(banjo::key::KeyType,banjo::key::KeyType)"}],V=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)"}]', symObjAddr: 0x4FF4, symBinAddr: 0x100008414, symSize: 0x17C }
  - { offsetInCU: 0x1A, offset: 0x162AC, size: 0x8, addend: 0x0, symName: '_stdlib::collections::dict::Dict::_find_index(stdlib::collections::dict::Dict[$0, $1],::Int,$0),K=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}],V=[typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]', symObjAddr: 0x5170, symBinAddr: 0x100008590, symSize: 0x240 }
  - { offsetInCU: 0x829, offset: 0x16ABB, size: 0x8, addend: 0x0, symName: '_stdlib::collections::dict::Dict::_find_index(stdlib::collections::dict::Dict[$0, $1],::Int,$0),K=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}],V=[typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]', symObjAddr: 0x5170, symBinAddr: 0x100008590, symSize: 0x240 }
  - { offsetInCU: 0x1A, offset: 0x1711E, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::__copyinit__(stdlib::collections::list::List[$0, $1]=&,stdlib::collections::list::List[$0, $1]),T=[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=ui8,size=1">>, scalar<ui8>, {"__copyinit__" : (!kgen.pointer<scalar<ui8>> init_self, !kgen.pointer<scalar<ui8>> read_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__copyinit__(::SIMD[$0, $1]=&,::SIMD[$0, $1])_thunk"<:dtype ui8, 1>, "__del__" : (!kgen.pointer<scalar<ui8>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype ui8, 1>, "__moveinit__" : (!kgen.pointer<scalar<ui8>> init_self, !kgen.pointer<scalar<ui8>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__moveinit__(::SIMD[$0, $1]=&,::SIMD[$0, $1])_thunk"<:dtype ui8, 1>}],hint_trivial_type=1', symObjAddr: 0x53B0, symBinAddr: 0x1000087D0, symSize: 0x1C4 }
  - { offsetInCU: 0x5E6, offset: 0x176EA, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::__copyinit__(stdlib::collections::list::List[$0, $1]=&,stdlib::collections::list::List[$0, $1]),T=[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=ui8,size=1">>, scalar<ui8>, {"__copyinit__" : (!kgen.pointer<scalar<ui8>> init_self, !kgen.pointer<scalar<ui8>> read_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__copyinit__(::SIMD[$0, $1]=&,::SIMD[$0, $1])_thunk"<:dtype ui8, 1>, "__del__" : (!kgen.pointer<scalar<ui8>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype ui8, 1>, "__moveinit__" : (!kgen.pointer<scalar<ui8>> init_self, !kgen.pointer<scalar<ui8>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__moveinit__(::SIMD[$0, $1]=&,::SIMD[$0, $1])_thunk"<:dtype ui8, 1>}],hint_trivial_type=1', symObjAddr: 0x53B0, symBinAddr: 0x1000087D0, symSize: 0x1C4 }
  - { offsetInCU: 0x1A, offset: 0x17B74, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::__copyinit__(stdlib::collections::list::List[$0, $1]=&,stdlib::collections::list::List[$0, $1]),T=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)"}],hint_trivial_type=0', symObjAddr: 0x5574, symBinAddr: 0x100008994, symSize: 0x168 }
  - { offsetInCU: 0x401, offset: 0x17F5B, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::__copyinit__(stdlib::collections::list::List[$0, $1]=&,stdlib::collections::list::List[$0, $1]),T=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)"}],hint_trivial_type=0', symObjAddr: 0x5574, symBinAddr: 0x100008994, symSize: 0x168 }
  - { offsetInCU: 0x1A, offset: 0x182E0, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::__copyinit__(stdlib::collections::list::List[$0, $1]=&,stdlib::collections::list::List[$0, $1]),T=[typevalue<#kgen.typeref<_"stdlib::utils::format::_FormatCurlyEntry">>, struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__copyinit__(stdlib::utils::format::_FormatCurlyEntry=&,stdlib::utils::format::_FormatCurlyEntry)", "__del__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__del__(stdlib::utils::format::_FormatCurlyEntry)", "__moveinit__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__moveinit__(stdlib::utils::format::_FormatCurlyEntry=&,stdlib::utils::format::_FormatCurlyEntry)"}],hint_trivial_type=0', symObjAddr: 0x56DC, symBinAddr: 0x100008AFC, symSize: 0x144 }
  - { offsetInCU: 0x4F4, offset: 0x187BA, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::__copyinit__(stdlib::collections::list::List[$0, $1]=&,stdlib::collections::list::List[$0, $1]),T=[typevalue<#kgen.typeref<_"stdlib::utils::format::_FormatCurlyEntry">>, struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__copyinit__(stdlib::utils::format::_FormatCurlyEntry=&,stdlib::utils::format::_FormatCurlyEntry)", "__del__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__del__(stdlib::utils::format::_FormatCurlyEntry)", "__moveinit__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__moveinit__(stdlib::utils::format::_FormatCurlyEntry=&,stdlib::utils::format::_FormatCurlyEntry)"}],hint_trivial_type=0', symObjAddr: 0x56DC, symBinAddr: 0x100008AFC, symSize: 0x144 }
  - { offsetInCU: 0x1A, offset: 0x189FC, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::__del__(stdlib::collections::list::List[$0, $1]),T=[typevalue<#kgen.typeref<_"stdlib::utils::format::_FormatCurlyEntry">>, struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__copyinit__(stdlib::utils::format::_FormatCurlyEntry=&,stdlib::utils::format::_FormatCurlyEntry)", "__del__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__del__(stdlib::utils::format::_FormatCurlyEntry)", "__moveinit__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__moveinit__(stdlib::utils::format::_FormatCurlyEntry=&,stdlib::utils::format::_FormatCurlyEntry)"}],hint_trivial_type=0', symObjAddr: 0x5820, symBinAddr: 0x100008C40, symSize: 0x60 }
  - { offsetInCU: 0x303, offset: 0x18CE5, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::__del__(stdlib::collections::list::List[$0, $1]),T=[typevalue<#kgen.typeref<_"stdlib::utils::format::_FormatCurlyEntry">>, struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__copyinit__(stdlib::utils::format::_FormatCurlyEntry=&,stdlib::utils::format::_FormatCurlyEntry)", "__del__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__del__(stdlib::utils::format::_FormatCurlyEntry)", "__moveinit__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__moveinit__(stdlib::utils::format::_FormatCurlyEntry=&,stdlib::utils::format::_FormatCurlyEntry)"}],hint_trivial_type=0', symObjAddr: 0x5820, symBinAddr: 0x100008C40, symSize: 0x60 }
  - { offsetInCU: 0x1A, offset: 0x18E1A, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::append(stdlib::collections::list::List[$0, $1]&,$0),T=[typevalue<#kgen.typeref<_"stdlib::collections::optional::Optional,T=[typevalue<#kgen.typeref<_\22stdlib::collections::dict::DictEntry,K=[typevalue<#kgen.typeref<_\\22stdlib::collections::string::String\\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\\22__copyinit__\\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\\22, \\22__del__\\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\\22, \\22__moveinit__\\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\\22, \\22__hash__\\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\\22, \\22__eq__\\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\\22, \\22__ne__\\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\\22}],V=[typevalue<#kgen.typeref<_\\22banjo::key::Key\\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\\22__copyinit__\\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\\22, \\22__del__\\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\\22banjo::key::Key::__del__(banjo::key::Key)\\22, \\22__moveinit__\\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\\22}]\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::dict::DictEntry::__copyinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])\22<:type [typevalue<#kgen.typeref<_\22stdlib::collections::string::String\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__hash__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\22, \22__eq__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\22, \22__ne__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\22}], :type [typevalue<#kgen.typeref<_\22banjo::key::Key\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\22, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__del__(banjo::key::Key)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\22}]>, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::dict::DictEntry::__del__(stdlib::collections::dict::DictEntry[$0, $1])\22<:type [typevalue<#kgen.typeref<_\22stdlib::collections::string::String\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__hash__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\22, \22__eq__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\22, \22__ne__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\22}], :type [typevalue<#kgen.typeref<_\22banjo::key::Key\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\22, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__del__(banjo::key::Key)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\22}]>, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::dict::DictEntry::__moveinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])\22<:type [typevalue<#kgen.typeref<_\22stdlib::collections::string::String\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__hash__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\22, \22__eq__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\22, \22__ne__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\22}], :type [typevalue<#kgen.typeref<_\22banjo::key::Key\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\22, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__del__(banjo::key::Key)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\22}]>}]">>, struct<(struct<(variant<struct<() memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>>) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(variant<struct<() memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(variant<struct<() memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>>) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::optional::Optional::__copyinit__(stdlib::collections::optional::Optional[$0]=&,stdlib::collections::optional::Optional[$0])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::dict::DictEntry,K=[typevalue<#kgen.typeref<_\22stdlib::collections::string::String\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__hash__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\22, \22__eq__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\22, \22__ne__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\22}],V=[typevalue<#kgen.typeref<_\22banjo::key::Key\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\22, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__del__(banjo::key::Key)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\22}]">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__copyinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>, "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__del__(stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>, "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__moveinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>}]>, "__del__" : (!kgen.pointer<struct<(struct<(variant<struct<() memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::optional::Optional::__del__(stdlib::collections::optional::Optional[$0])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::dict::DictEntry,K=[typevalue<#kgen.typeref<_\22stdlib::collections::string::String\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__hash__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\22, \22__eq__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\22, \22__ne__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\22}],V=[typevalue<#kgen.typeref<_\22banjo::key::Key\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\22, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__del__(banjo::key::Key)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\22}]">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__copyinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>, "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__del__(stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>, "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__moveinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>}]>, "__moveinit__" : (!kgen.pointer<struct<(struct<(variant<struct<() memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(variant<struct<() memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::optional::Optional::__moveinit__(stdlib::collections::optional::Optional[$0]=&,stdlib::collections::optional::Optional[$0])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::dict::DictEntry,K=[typevalue<#kgen.typeref<_\22stdlib::collections::string::String\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__hash__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\22, \22__eq__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\22, \22__ne__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\22}],V=[typevalue<#kgen.typeref<_\22banjo::key::Key\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\22, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__del__(banjo::key::Key)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\22}]">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__copyinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>, "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__del__(stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>, "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__moveinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>}]>}],hint_trivial_type=0', symObjAddr: 0x5880, symBinAddr: 0x100008CA0, symSize: 0x150 }
  - { offsetInCU: 0x40C, offset: 0x1920C, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::append(stdlib::collections::list::List[$0, $1]&,$0),T=[typevalue<#kgen.typeref<_"stdlib::collections::optional::Optional,T=[typevalue<#kgen.typeref<_\22stdlib::collections::dict::DictEntry,K=[typevalue<#kgen.typeref<_\\22stdlib::collections::string::String\\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\\22__copyinit__\\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\\22, \\22__del__\\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\\22, \\22__moveinit__\\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\\22, \\22__hash__\\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\\22, \\22__eq__\\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\\22, \\22__ne__\\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\\22}],V=[typevalue<#kgen.typeref<_\\22banjo::key::Key\\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\\22__copyinit__\\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\\22, \\22__del__\\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\\22banjo::key::Key::__del__(banjo::key::Key)\\22, \\22__moveinit__\\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\\22}]\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::dict::DictEntry::__copyinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])\22<:type [typevalue<#kgen.typeref<_\22stdlib::collections::string::String\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__hash__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\22, \22__eq__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\22, \22__ne__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\22}], :type [typevalue<#kgen.typeref<_\22banjo::key::Key\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\22, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__del__(banjo::key::Key)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\22}]>, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::dict::DictEntry::__del__(stdlib::collections::dict::DictEntry[$0, $1])\22<:type [typevalue<#kgen.typeref<_\22stdlib::collections::string::String\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__hash__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\22, \22__eq__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\22, \22__ne__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\22}], :type [typevalue<#kgen.typeref<_\22banjo::key::Key\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\22, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__del__(banjo::key::Key)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\22}]>, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::dict::DictEntry::__moveinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])\22<:type [typevalue<#kgen.typeref<_\22stdlib::collections::string::String\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__hash__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\22, \22__eq__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\22, \22__ne__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\22}], :type [typevalue<#kgen.typeref<_\22banjo::key::Key\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\22, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__del__(banjo::key::Key)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\22}]>}]">>, struct<(struct<(variant<struct<() memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>>) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(variant<struct<() memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(variant<struct<() memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>>) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::optional::Optional::__copyinit__(stdlib::collections::optional::Optional[$0]=&,stdlib::collections::optional::Optional[$0])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::dict::DictEntry,K=[typevalue<#kgen.typeref<_\22stdlib::collections::string::String\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__hash__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\22, \22__eq__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\22, \22__ne__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\22}],V=[typevalue<#kgen.typeref<_\22banjo::key::Key\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\22, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__del__(banjo::key::Key)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\22}]">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__copyinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>, "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__del__(stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>, "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__moveinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>}]>, "__del__" : (!kgen.pointer<struct<(struct<(variant<struct<() memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::optional::Optional::__del__(stdlib::collections::optional::Optional[$0])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::dict::DictEntry,K=[typevalue<#kgen.typeref<_\22stdlib::collections::string::String\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__hash__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\22, \22__eq__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\22, \22__ne__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\22}],V=[typevalue<#kgen.typeref<_\22banjo::key::Key\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\22, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__del__(banjo::key::Key)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\22}]">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__copyinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>, "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__del__(stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>, "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__moveinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>}]>, "__moveinit__" : (!kgen.pointer<struct<(struct<(variant<struct<() memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(variant<struct<() memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::optional::Optional::__moveinit__(stdlib::collections::optional::Optional[$0]=&,stdlib::collections::optional::Optional[$0])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::dict::DictEntry,K=[typevalue<#kgen.typeref<_\22stdlib::collections::string::String\22>>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__del__(stdlib::collections::string::String)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)\22, \22__hash__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _\22stdlib::collections::string::String::__hash__(stdlib::collections::string::String)\22, \22__eq__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)\22, \22__ne__\22 : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _\22stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)\22}],V=[typevalue<#kgen.typeref<_\22banjo::key::Key\22>>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)\22, \22__del__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__del__(banjo::key::Key)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)\22}]">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__copyinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>, "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__del__(stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>, "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::dict::DictEntry::__moveinit__(stdlib::collections::dict::DictEntry[$0, $1]=&,stdlib::collections::dict::DictEntry[$0, $1])"<:type [typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__hash__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__hash__(stdlib::collections::string::String)", "__eq__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__eq__(stdlib::collections::string::String,stdlib::collections::string::String)", "__ne__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> i1 = _"stdlib::collections::string::String::__ne__(stdlib::collections::string::String,stdlib::collections::string::String)"}], :type [typevalue<#kgen.typeref<_"banjo::key::Key">>, struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::Key::__copyinit__(banjo::key::Key=&,banjo::key::Key)", "__del__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__del__(banjo::key::Key)", "__moveinit__" : (!kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> init_self, !kgen.pointer<struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::Key::__moveinit__(banjo::key::Key=&,banjo::key::Key)"}]>}]>}],hint_trivial_type=0', symObjAddr: 0x5880, symBinAddr: 0x100008CA0, symSize: 0x150 }
  - { offsetInCU: 0x1A, offset: 0x19435, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::append(stdlib::collections::list::List[$0, $1]&,$0),T=[typevalue<#kgen.typeref<_"stdlib::utils::format::_FormatCurlyEntry">>, struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__copyinit__(stdlib::utils::format::_FormatCurlyEntry=&,stdlib::utils::format::_FormatCurlyEntry)", "__del__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__del__(stdlib::utils::format::_FormatCurlyEntry)", "__moveinit__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__moveinit__(stdlib::utils::format::_FormatCurlyEntry=&,stdlib::utils::format::_FormatCurlyEntry)"}],hint_trivial_type=0', symObjAddr: 0x59D0, symBinAddr: 0x100008DF0, symSize: 0x1DC }
  - { offsetInCU: 0x59A, offset: 0x199B5, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::append(stdlib::collections::list::List[$0, $1]&,$0),T=[typevalue<#kgen.typeref<_"stdlib::utils::format::_FormatCurlyEntry">>, struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__copyinit__(stdlib::utils::format::_FormatCurlyEntry=&,stdlib::utils::format::_FormatCurlyEntry)", "__del__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__del__(stdlib::utils::format::_FormatCurlyEntry)", "__moveinit__" : (!kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(index, index, scalar<ui8>, struct<(struct<(variant<struct<() memoryOnly>, struct<(scalar<ui8>, scalar<ui8>, scalar<ui8>, i1, i1, scalar<ui8>, scalar<ui8>, scalar<ui8>, scalar<ui8>)>>) memoryOnly>) memoryOnly>, struct<(variant<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, index, none, i1>) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::format::_FormatCurlyEntry::__moveinit__(stdlib::utils::format::_FormatCurlyEntry=&,stdlib::utils::format::_FormatCurlyEntry)"}],hint_trivial_type=0', symObjAddr: 0x59D0, symBinAddr: 0x100008DF0, symSize: 0x1DC }
  - { offsetInCU: 0x1A, offset: 0x19D38, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::append(stdlib::collections::list::List[$0, $1]&,$0),T=[typevalue<#kgen.typeref<_"stdlib::utils::variant::Variant,Ts=[[typevalue<#kgen.typeref<_\22banjo::program::ExitMsg\22>>, struct<() memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> read_mem) -> !kgen.none = _\22banjo::program::ExitMsg::__copyinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)\22, \22__del__\22 : (!kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::program::ExitMsg::__del__(banjo::program::ExitMsg)\22, \22__moveinit__\22 : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::program::ExitMsg::__moveinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)\22}], [typevalue<#kgen.typeref<_\22banjo::key::KeyMsg\22>>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::KeyMsg::__copyinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::KeyMsg::__del__(banjo::key::KeyMsg)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::KeyMsg::__moveinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)\22}], [typevalue<#kgen.typeref<_\22stdlib::builtin::none::NoneType\22>>, none, {\22__copyinit__\22 : (!kgen.pointer<none> init_self, !kgen.pointer<none> read_mem) -> !kgen.none = _\22stdlib::builtin::none::NoneType::__copyinit__(::NoneType=&,::NoneType)_thunk\22, \22__del__\22 : (!kgen.pointer<none> owned_in_mem) -> !kgen.none = _\22stdlib::builtin::none::NoneType::__del__(::NoneType)_thunk\22, \22__moveinit__\22 : (!kgen.pointer<none> init_self, !kgen.pointer<none> owned_in_mem) -> !kgen.none = _\22stdlib::builtin::none::NoneType::__moveinit__(::NoneType=&,::NoneType)_thunk\22}]]">>, struct<(variant<struct<() memoryOnly>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, none>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(variant<struct<() memoryOnly>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, none>) memoryOnly>> init_self, !kgen.pointer<struct<(variant<struct<() memoryOnly>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, none>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::utils::variant::Variant::__copyinit__(stdlib::utils::variant::Variant[$0]=&,stdlib::utils::variant::Variant[$0])"<:variadic<type> [[typevalue<#kgen.typeref<_"banjo::program::ExitMsg">>, struct<() memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> read_mem) -> !kgen.none = _"banjo::program::ExitMsg::__copyinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)", "__del__" : (!kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::program::ExitMsg::__del__(banjo::program::ExitMsg)", "__moveinit__" : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::program::ExitMsg::__moveinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)"}], [typevalue<#kgen.typeref<_"banjo::key::KeyMsg">>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::KeyMsg::__copyinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)", "__del__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::KeyMsg::__del__(banjo::key::KeyMsg)", "__moveinit__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::KeyMsg::__moveinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)"}], [typevalue<#kgen.typeref<_"stdlib::builtin::none::NoneType">>, none, {"__copyinit__" : (!kgen.pointer<none> init_self, !kgen.pointer<none> read_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__copyinit__(::NoneType=&,::NoneType)_thunk", "__del__" : (!kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__del__(::NoneType)_thunk", "__moveinit__" : (!kgen.pointer<none> init_self, !kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__moveinit__(::NoneType=&,::NoneType)_thunk"}]]>, "__del__" : (!kgen.pointer<struct<(variant<struct<() memoryOnly>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, none>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::variant::Variant::__del__(stdlib::utils::variant::Variant[$0])"<:variadic<type> [[typevalue<#kgen.typeref<_"banjo::program::ExitMsg">>, struct<() memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> read_mem) -> !kgen.none = _"banjo::program::ExitMsg::__copyinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)", "__del__" : (!kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::program::ExitMsg::__del__(banjo::program::ExitMsg)", "__moveinit__" : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::program::ExitMsg::__moveinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)"}], [typevalue<#kgen.typeref<_"banjo::key::KeyMsg">>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::KeyMsg::__copyinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)", "__del__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::KeyMsg::__del__(banjo::key::KeyMsg)", "__moveinit__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::KeyMsg::__moveinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)"}], [typevalue<#kgen.typeref<_"stdlib::builtin::none::NoneType">>, none, {"__copyinit__" : (!kgen.pointer<none> init_self, !kgen.pointer<none> read_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__copyinit__(::NoneType=&,::NoneType)_thunk", "__del__" : (!kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__del__(::NoneType)_thunk", "__moveinit__" : (!kgen.pointer<none> init_self, !kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__moveinit__(::NoneType=&,::NoneType)_thunk"}]]>, "__moveinit__" : (!kgen.pointer<struct<(variant<struct<() memoryOnly>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, none>) memoryOnly>> init_self, !kgen.pointer<struct<(variant<struct<() memoryOnly>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, none>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::variant::Variant::__moveinit__(stdlib::utils::variant::Variant[$0]=&,stdlib::utils::variant::Variant[$0])"<:variadic<type> [[typevalue<#kgen.typeref<_"banjo::program::ExitMsg">>, struct<() memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> read_mem) -> !kgen.none = _"banjo::program::ExitMsg::__copyinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)", "__del__" : (!kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::program::ExitMsg::__del__(banjo::program::ExitMsg)", "__moveinit__" : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::program::ExitMsg::__moveinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)"}], [typevalue<#kgen.typeref<_"banjo::key::KeyMsg">>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::KeyMsg::__copyinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)", "__del__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::KeyMsg::__del__(banjo::key::KeyMsg)", "__moveinit__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::KeyMsg::__moveinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)"}], [typevalue<#kgen.typeref<_"stdlib::builtin::none::NoneType">>, none, {"__copyinit__" : (!kgen.pointer<none> init_self, !kgen.pointer<none> read_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__copyinit__(::NoneType=&,::NoneType)_thunk", "__del__" : (!kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__del__(::NoneType)_thunk", "__moveinit__" : (!kgen.pointer<none> init_self, !kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__moveinit__(::NoneType=&,::NoneType)_thunk"}]]>}],hint_trivial_type=0', symObjAddr: 0x5BAC, symBinAddr: 0x100008FCC, symSize: 0x130 }
  - { offsetInCU: 0x3E4, offset: 0x1A102, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::append(stdlib::collections::list::List[$0, $1]&,$0),T=[typevalue<#kgen.typeref<_"stdlib::utils::variant::Variant,Ts=[[typevalue<#kgen.typeref<_\22banjo::program::ExitMsg\22>>, struct<() memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> read_mem) -> !kgen.none = _\22banjo::program::ExitMsg::__copyinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)\22, \22__del__\22 : (!kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::program::ExitMsg::__del__(banjo::program::ExitMsg)\22, \22__moveinit__\22 : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::program::ExitMsg::__moveinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)\22}], [typevalue<#kgen.typeref<_\22banjo::key::KeyMsg\22>>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {\22__copyinit__\22 : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _\22banjo::key::KeyMsg::__copyinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)\22, \22__del__\22 : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::KeyMsg::__del__(banjo::key::KeyMsg)\22, \22__moveinit__\22 : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _\22banjo::key::KeyMsg::__moveinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)\22}], [typevalue<#kgen.typeref<_\22stdlib::builtin::none::NoneType\22>>, none, {\22__copyinit__\22 : (!kgen.pointer<none> init_self, !kgen.pointer<none> read_mem) -> !kgen.none = _\22stdlib::builtin::none::NoneType::__copyinit__(::NoneType=&,::NoneType)_thunk\22, \22__del__\22 : (!kgen.pointer<none> owned_in_mem) -> !kgen.none = _\22stdlib::builtin::none::NoneType::__del__(::NoneType)_thunk\22, \22__moveinit__\22 : (!kgen.pointer<none> init_self, !kgen.pointer<none> owned_in_mem) -> !kgen.none = _\22stdlib::builtin::none::NoneType::__moveinit__(::NoneType=&,::NoneType)_thunk\22}]]">>, struct<(variant<struct<() memoryOnly>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, none>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(variant<struct<() memoryOnly>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, none>) memoryOnly>> init_self, !kgen.pointer<struct<(variant<struct<() memoryOnly>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, none>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::utils::variant::Variant::__copyinit__(stdlib::utils::variant::Variant[$0]=&,stdlib::utils::variant::Variant[$0])"<:variadic<type> [[typevalue<#kgen.typeref<_"banjo::program::ExitMsg">>, struct<() memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> read_mem) -> !kgen.none = _"banjo::program::ExitMsg::__copyinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)", "__del__" : (!kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::program::ExitMsg::__del__(banjo::program::ExitMsg)", "__moveinit__" : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::program::ExitMsg::__moveinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)"}], [typevalue<#kgen.typeref<_"banjo::key::KeyMsg">>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::KeyMsg::__copyinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)", "__del__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::KeyMsg::__del__(banjo::key::KeyMsg)", "__moveinit__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::KeyMsg::__moveinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)"}], [typevalue<#kgen.typeref<_"stdlib::builtin::none::NoneType">>, none, {"__copyinit__" : (!kgen.pointer<none> init_self, !kgen.pointer<none> read_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__copyinit__(::NoneType=&,::NoneType)_thunk", "__del__" : (!kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__del__(::NoneType)_thunk", "__moveinit__" : (!kgen.pointer<none> init_self, !kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__moveinit__(::NoneType=&,::NoneType)_thunk"}]]>, "__del__" : (!kgen.pointer<struct<(variant<struct<() memoryOnly>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, none>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::variant::Variant::__del__(stdlib::utils::variant::Variant[$0])"<:variadic<type> [[typevalue<#kgen.typeref<_"banjo::program::ExitMsg">>, struct<() memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> read_mem) -> !kgen.none = _"banjo::program::ExitMsg::__copyinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)", "__del__" : (!kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::program::ExitMsg::__del__(banjo::program::ExitMsg)", "__moveinit__" : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::program::ExitMsg::__moveinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)"}], [typevalue<#kgen.typeref<_"banjo::key::KeyMsg">>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::KeyMsg::__copyinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)", "__del__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::KeyMsg::__del__(banjo::key::KeyMsg)", "__moveinit__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::KeyMsg::__moveinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)"}], [typevalue<#kgen.typeref<_"stdlib::builtin::none::NoneType">>, none, {"__copyinit__" : (!kgen.pointer<none> init_self, !kgen.pointer<none> read_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__copyinit__(::NoneType=&,::NoneType)_thunk", "__del__" : (!kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__del__(::NoneType)_thunk", "__moveinit__" : (!kgen.pointer<none> init_self, !kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__moveinit__(::NoneType=&,::NoneType)_thunk"}]]>, "__moveinit__" : (!kgen.pointer<struct<(variant<struct<() memoryOnly>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, none>) memoryOnly>> init_self, !kgen.pointer<struct<(variant<struct<() memoryOnly>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, none>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::utils::variant::Variant::__moveinit__(stdlib::utils::variant::Variant[$0]=&,stdlib::utils::variant::Variant[$0])"<:variadic<type> [[typevalue<#kgen.typeref<_"banjo::program::ExitMsg">>, struct<() memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> read_mem) -> !kgen.none = _"banjo::program::ExitMsg::__copyinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)", "__del__" : (!kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::program::ExitMsg::__del__(banjo::program::ExitMsg)", "__moveinit__" : (!kgen.pointer<struct<() memoryOnly>> init_self, !kgen.pointer<struct<() memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::program::ExitMsg::__moveinit__(banjo::program::ExitMsg=&,banjo::program::ExitMsg)"}], [typevalue<#kgen.typeref<_"banjo::key::KeyMsg">>, struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"banjo::key::KeyMsg::__copyinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)", "__del__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::KeyMsg::__del__(banjo::key::KeyMsg)", "__moveinit__" : (!kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(index, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, i1, i1) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"banjo::key::KeyMsg::__moveinit__(banjo::key::KeyMsg=&,banjo::key::KeyMsg)"}], [typevalue<#kgen.typeref<_"stdlib::builtin::none::NoneType">>, none, {"__copyinit__" : (!kgen.pointer<none> init_self, !kgen.pointer<none> read_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__copyinit__(::NoneType=&,::NoneType)_thunk", "__del__" : (!kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__del__(::NoneType)_thunk", "__moveinit__" : (!kgen.pointer<none> init_self, !kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::none::NoneType::__moveinit__(::NoneType=&,::NoneType)_thunk"}]]>}],hint_trivial_type=0', symObjAddr: 0x5BAC, symBinAddr: 0x100008FCC, symSize: 0x130 }
  - { offsetInCU: 0x1A, offset: 0x1A337, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::resize(stdlib::collections::list::List[$0, $1]&,::Int,$0),T=[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=ui8,size=1">>, scalar<ui8>, {"__copyinit__" : (!kgen.pointer<scalar<ui8>> init_self, !kgen.pointer<scalar<ui8>> read_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__copyinit__(::SIMD[$0, $1]=&,::SIMD[$0, $1])_thunk"<:dtype ui8, 1>, "__del__" : (!kgen.pointer<scalar<ui8>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype ui8, 1>, "__moveinit__" : (!kgen.pointer<scalar<ui8>> init_self, !kgen.pointer<scalar<ui8>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__moveinit__(::SIMD[$0, $1]=&,::SIMD[$0, $1])_thunk"<:dtype ui8, 1>}],hint_trivial_type=1', symObjAddr: 0x5CDC, symBinAddr: 0x1000090FC, symSize: 0x27C }
  - { offsetInCU: 0x4DA, offset: 0x1A7F7, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::resize(stdlib::collections::list::List[$0, $1]&,::Int,$0),T=[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=ui8,size=1">>, scalar<ui8>, {"__copyinit__" : (!kgen.pointer<scalar<ui8>> init_self, !kgen.pointer<scalar<ui8>> read_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__copyinit__(::SIMD[$0, $1]=&,::SIMD[$0, $1])_thunk"<:dtype ui8, 1>, "__del__" : (!kgen.pointer<scalar<ui8>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype ui8, 1>, "__moveinit__" : (!kgen.pointer<scalar<ui8>> init_self, !kgen.pointer<scalar<ui8>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__moveinit__(::SIMD[$0, $1]=&,::SIMD[$0, $1])_thunk"<:dtype ui8, 1>}],hint_trivial_type=1', symObjAddr: 0x5CDC, symBinAddr: 0x1000090FC, symSize: 0x27C }
  - { offsetInCU: 0x1A, offset: 0x1AEFA, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::__getitem__(stdlib::collections::list::List[$0, $1],::Slice),T=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)"}],hint_trivial_type=0', symObjAddr: 0x5F58, symBinAddr: 0x100009378, symSize: 0x2A8 }
  - { offsetInCU: 0x6E4, offset: 0x1B5C4, size: 0x8, addend: 0x0, symName: '_stdlib::collections::list::List::__getitem__(stdlib::collections::list::List[$0, $1],::Slice),T=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__copyinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> !kgen.none = _"stdlib::collections::string::String::__copyinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "__moveinit__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> init_self, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__moveinit__(stdlib::collections::string::String=&,stdlib::collections::string::String)"}],hint_trivial_type=0', symObjAddr: 0x5F58, symBinAddr: 0x100009378, symSize: 0x2A8 }
  - { offsetInCU: 0x1A, offset: 0x1BAF4, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::_str_to_base_error[::Bool,::Origin[$0]](::Int,stdlib::utils::string_slice::StringSlice[$0, $1]),is_mutable`=0', symObjAddr: 0x6200, symBinAddr: 0x100009620, symSize: 0x114 }
  - { offsetInCU: 0x297, offset: 0x1BD71, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::_str_to_base_error[::Bool,::Origin[$0]](::Int,stdlib::utils::string_slice::StringSlice[$0, $1]),is_mutable`=0', symObjAddr: 0x6200, symBinAddr: 0x100009620, symSize: 0x114 }
  - { offsetInCU: 0x1A, offset: 0x1C20C, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::__init__(stdlib::collections::string::String=&,stdlib::utils::stringref::StringRef)', symObjAddr: 0x6314, symBinAddr: 0x100009734, symSize: 0x12C }
  - { offsetInCU: 0x41D, offset: 0x1C60F, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::__init__(stdlib::collections::string::String=&,stdlib::utils::stringref::StringRef)', symObjAddr: 0x6314, symBinAddr: 0x100009734, symSize: 0x12C }
  - { offsetInCU: 0x1A, offset: 0x1C967, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"stdlib::builtin::error::Error">>, struct<(pointer<none>, index)>, {"write_to" : <type>(!kgen.pointer<struct<(pointer<none>, index)>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"stdlib::builtin::error::Error::write_to[stdlib::utils::write::Writer](::Error,$0&)"<:type ?>, "__del__" : (!kgen.pointer<struct<(pointer<none>, index)>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::error::Error::__del__(::Error)"}]]', symObjAddr: 0x6440, symBinAddr: 0x100009860, symSize: 0x70 }
  - { offsetInCU: 0x316, offset: 0x1CC63, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"stdlib::builtin::error::Error">>, struct<(pointer<none>, index)>, {"write_to" : <type>(!kgen.pointer<struct<(pointer<none>, index)>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"stdlib::builtin::error::Error::write_to[stdlib::utils::write::Writer](::Error,$0&)"<:type ?>, "__del__" : (!kgen.pointer<struct<(pointer<none>, index)>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::error::Error::__del__(::Error)"}]]', symObjAddr: 0x6440, symBinAddr: 0x100009860, symSize: 0x70 }
  - { offsetInCU: 0x1A, offset: 0x1CE20, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"write_to" : <type>(!kgen.pointer<index> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|5J6dtpZEJKHhpuZ8i7gIfomLZ0FPr0/wYZCK9YRjimY=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None](::Int,$0&)"<:type ?, :<type>(index, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::int::Int::write_to[stdlib::utils::write::Writer](::Int,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}]]', symObjAddr: 0x64B0, symBinAddr: 0x1000098D0, symSize: 0x6C }
  - { offsetInCU: 0x416, offset: 0x1D21C, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"write_to" : <type>(!kgen.pointer<index> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None|5J6dtpZEJKHhpuZ8i7gIfomLZ0FPr0/wYZCK9YRjimY=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::Int, mut $0, /) -> None](::Int,$0&)"<:type ?, :<type>(index, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::int::Int::write_to[stdlib::utils::write::Writer](::Int,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}]]', symObjAddr: 0x64B0, symBinAddr: 0x1000098D0, symSize: 0x6C }
  - { offsetInCU: 0x1A, offset: 0x1D46E, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=si32,size=1">>, scalar<si32>, {"write_to" : <type>(!kgen.pointer<scalar<si32>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[::DType, ::Int, stdlib::utils::write::Writer](::SIMD[$0, $1], mut $2, /) -> None|fn[stdlib::utils::write::Writer](::SIMD[$1|0, $1|1], mut $0, /) -> None|ok3sr7+desjjISV6jE3Yf5pPlz6Aqgj4wq4x6Mm0oa0=[::DType,::Int,stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::SIMD[$1|0, $1|1], mut $0, /) -> None](::SIMD[$0, $1],$2&)"<:dtype si32, 1, :type ?, :<type>(!pop.scalar<si32>, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::simd::SIMD::write_to[stdlib::utils::write::Writer](::SIMD[$0, $1],$2&)"<:dtype si32, 1, :type ?>>, "__del__" : (!kgen.pointer<scalar<si32>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype si32, 1>}]]', symObjAddr: 0x651C, symBinAddr: 0x10000993C, symSize: 0x6C }
  - { offsetInCU: 0x31A, offset: 0x1D76E, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=si32,size=1">>, scalar<si32>, {"write_to" : <type>(!kgen.pointer<scalar<si32>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[::DType, ::Int, stdlib::utils::write::Writer](::SIMD[$0, $1], mut $2, /) -> None|fn[stdlib::utils::write::Writer](::SIMD[$1|0, $1|1], mut $0, /) -> None|ok3sr7+desjjISV6jE3Yf5pPlz6Aqgj4wq4x6Mm0oa0=[::DType,::Int,stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::SIMD[$1|0, $1|1], mut $0, /) -> None](::SIMD[$0, $1],$2&)"<:dtype si32, 1, :type ?, :<type>(!pop.scalar<si32>, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::simd::SIMD::write_to[stdlib::utils::write::Writer](::SIMD[$0, $1],$2&)"<:dtype si32, 1, :type ?>>, "__del__" : (!kgen.pointer<scalar<si32>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype si32, 1>}]]', symObjAddr: 0x651C, symBinAddr: 0x10000993C, symSize: 0x6C }
  - { offsetInCU: 0x1A, offset: 0x1D933, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=ui16,size=1">>, scalar<ui16>, {"write_to" : <type>(!kgen.pointer<scalar<ui16>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[::DType, ::Int, stdlib::utils::write::Writer](::SIMD[$0, $1], mut $2, /) -> None|fn[stdlib::utils::write::Writer](::SIMD[$1|0, $1|1], mut $0, /) -> None|ok3sr7+desjjISV6jE3Yf5pPlz6Aqgj4wq4x6Mm0oa0=[::DType,::Int,stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::SIMD[$1|0, $1|1], mut $0, /) -> None](::SIMD[$0, $1],$2&)"<:dtype ui16, 1, :type ?, :<type>(!pop.scalar<ui16>, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::simd::SIMD::write_to[stdlib::utils::write::Writer](::SIMD[$0, $1],$2&)"<:dtype ui16, 1, :type ?>>, "__del__" : (!kgen.pointer<scalar<ui16>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype ui16, 1>}]]', symObjAddr: 0x6588, symBinAddr: 0x1000099A8, symSize: 0x6C }
  - { offsetInCU: 0x30F, offset: 0x1DC28, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=ui16,size=1">>, scalar<ui16>, {"write_to" : <type>(!kgen.pointer<scalar<ui16>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[::DType, ::Int, stdlib::utils::write::Writer](::SIMD[$0, $1], mut $2, /) -> None|fn[stdlib::utils::write::Writer](::SIMD[$1|0, $1|1], mut $0, /) -> None|ok3sr7+desjjISV6jE3Yf5pPlz6Aqgj4wq4x6Mm0oa0=[::DType,::Int,stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::SIMD[$1|0, $1|1], mut $0, /) -> None](::SIMD[$0, $1],$2&)"<:dtype ui16, 1, :type ?, :<type>(!pop.scalar<ui16>, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::simd::SIMD::write_to[stdlib::utils::write::Writer](::SIMD[$0, $1],$2&)"<:dtype ui16, 1, :type ?>>, "__del__" : (!kgen.pointer<scalar<ui16>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype ui16, 1>}]]', symObjAddr: 0x6588, symBinAddr: 0x1000099A8, symSize: 0x6C }
  - { offsetInCU: 0x1A, offset: 0x1DDE5, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::dtype::DType">>, dtype, {"write_to" : <type>(!kgen.pointer<dtype> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::DType, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::DType, mut $0, /) -> None|+VkRrTt/3rRL3CKLREj82OY6d7W1baehUoT5DoAUIfk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::DType, mut $0, /) -> None](::DType,$0&)"<:type ?, :<type>(!kgen.dtype, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::dtype::DType::write_to[stdlib::utils::write::Writer](::DType,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<dtype> owned_in_mem) -> !kgen.none = _"stdlib::builtin::dtype::DType::__del__(::DType)_thunk"}]]', symObjAddr: 0x65F4, symBinAddr: 0x100009A14, symSize: 0x9C }
  - { offsetInCU: 0x460, offset: 0x1E22B, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}], [typevalue<#kgen.typeref<_"stdlib::builtin::dtype::DType">>, dtype, {"write_to" : <type>(!kgen.pointer<dtype> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::DType, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::DType, mut $0, /) -> None|+VkRrTt/3rRL3CKLREj82OY6d7W1baehUoT5DoAUIfk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::DType, mut $0, /) -> None](::DType,$0&)"<:type ?, :<type>(!kgen.dtype, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::dtype::DType::write_to[stdlib::utils::write::Writer](::DType,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<dtype> owned_in_mem) -> !kgen.none = _"stdlib::builtin::dtype::DType::__del__(::DType)_thunk"}]]', symObjAddr: 0x65F4, symBinAddr: 0x100009A14, symSize: 0x9C }
  - { offsetInCU: 0x1A, offset: 0x1E509, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_to" : <type>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"stdlib::collections::string::String::write_to[stdlib::utils::write::Writer](stdlib::collections::string::String,$0&)"<:type ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]]', symObjAddr: 0x6690, symBinAddr: 0x100009AB0, symSize: 0x78 }
  - { offsetInCU: 0x3D1, offset: 0x1E8C0, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_to" : <type>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"stdlib::collections::string::String::write_to[stdlib::utils::write::Writer](stdlib::collections::string::String,$0&)"<:type ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]]', symObjAddr: 0x6690, symBinAddr: 0x100009AB0, symSize: 0x78 }
  - { offsetInCU: 0x1A, offset: 0x1EB2C, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"weave::bytes::ByteWriter">>, struct<(pointer<none>, index, index, index) memoryOnly>, {"write_to" : <type>(!kgen.pointer<struct<(pointer<none>, index, index, index) memoryOnly>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"weave::bytes::ByteWriter::write_to[stdlib::utils::write::Writer](weave::bytes::ByteWriter,$0&)"<:type ?>, "__del__" : (!kgen.pointer<struct<(pointer<none>, index, index, index) memoryOnly>> owned_in_mem) -> !kgen.none = _"weave::bytes::ByteWriter::__del__(weave::bytes::ByteWriter)"}]]', symObjAddr: 0x6708, symBinAddr: 0x100009B28, symSize: 0x6C }
  - { offsetInCU: 0x3DA, offset: 0x1EEEC, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::write[*stdlib::utils::write::Writable](*$0,stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}],stdlib::utils::string_slice::StringSlice[{False}, {StaticConstantOrigin}]),Ts=[[typevalue<#kgen.typeref<_"weave::bytes::ByteWriter">>, struct<(pointer<none>, index, index, index) memoryOnly>, {"write_to" : <type>(!kgen.pointer<struct<(pointer<none>, index, index, index) memoryOnly>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"weave::bytes::ByteWriter::write_to[stdlib::utils::write::Writer](weave::bytes::ByteWriter,$0&)"<:type ?>, "__del__" : (!kgen.pointer<struct<(pointer<none>, index, index, index) memoryOnly>> owned_in_mem) -> !kgen.none = _"weave::bytes::ByteWriter::__del__(weave::bytes::ByteWriter)"}]]', symObjAddr: 0x6708, symBinAddr: 0x100009B28, symSize: 0x6C }
  - { offsetInCU: 0x1A, offset: 0x1F113, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::__getitem__[::Indexer](stdlib::collections::string::String,$0),IndexerType=[typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"__index__" : (!kgen.pointer<index> read_mem) -> index = _"fn(::Int, /) -> ::Int|fn(::Int, /) -> ::Int|SvX9yaS0FYzeWs5M5Dva7PQKb47+jDtCu4+x1kzaAEw=[fn(::Int, /) -> ::Int](::Int)"<:(index) -> index _"stdlib::builtin::int::Int::__index__(::Int)">, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}]', symObjAddr: 0x6774, symBinAddr: 0x100009B94, symSize: 0x1DC }
  - { offsetInCU: 0x64E, offset: 0x1F747, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::__getitem__[::Indexer](stdlib::collections::string::String,$0),IndexerType=[typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"__index__" : (!kgen.pointer<index> read_mem) -> index = _"fn(::Int, /) -> ::Int|fn(::Int, /) -> ::Int|SvX9yaS0FYzeWs5M5Dva7PQKb47+jDtCu4+x1kzaAEw=[fn(::Int, /) -> ::Int](::Int)"<:(index) -> index _"stdlib::builtin::int::Int::__index__(::Int)">, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk"}]', symObjAddr: 0x6774, symBinAddr: 0x100009B94, symSize: 0x1DC }
  - { offsetInCU: 0x1A, offset: 0x1FBFA, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::replace(stdlib::collections::string::String,stdlib::collections::string::String,stdlib::collections::string::String)', symObjAddr: 0x6950, symBinAddr: 0x100009D70, symSize: 0xBD8 }
  - { offsetInCU: 0x8FF, offset: 0x204DF, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::replace(stdlib::collections::string::String,stdlib::collections::string::String,stdlib::collections::string::String)', symObjAddr: 0x6950, symBinAddr: 0x100009D70, symSize: 0xBD8 }
  - { offsetInCU: 0x1A, offset: 0x2234E, size: 0x8, addend: 0x0, symName: '_stdlib::utils::string_slice::StringSlice::__str__(stdlib::utils::string_slice::StringSlice[$0, $1]),is_mutable=0', symObjAddr: 0x7528, symBinAddr: 0x10000A948, symSize: 0x14 }
  - { offsetInCU: 0x27, offset: 0x2235B, size: 0x8, addend: 0x0, symName: '_stdlib::utils::string_slice::StringSlice::__str__(stdlib::utils::string_slice::StringSlice[$0, $1]),is_mutable=0', symObjAddr: 0x7528, symBinAddr: 0x10000A948, symSize: 0x14 }
  - { offsetInCU: 0x1A, offset: 0x2243B, size: 0x8, addend: 0x0, symName: '_stdlib::utils::write::_WriteBufferStack::write_bytes[::Bool,::Origin[$2]](stdlib::utils::write::_WriteBufferStack[$0, $1]&,stdlib::memory::span::Span[$2, ::SIMD[{uint8}, {1}], $3]),W=[typevalue<#kgen.typeref<_"stdlib::builtin::file_descriptor::FileDescriptor">>, index, {"__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__moveinit__(::FileDescriptor=&,::FileDescriptor)_thunk", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__del__(::FileDescriptor)_thunk", "write_bytes" : <i1>(!kgen.pointer<index> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write_bytes[::Bool,::Origin[$0]](::FileDescriptor&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<index> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write[*stdlib::utils::write::Writable](::FileDescriptor&,*$0)"<:variadic<type> ?>}],capacity=4096,is_mutable`2x1=0', symObjAddr: 0x753C, symBinAddr: 0x10000A95C, symSize: 0x190 }
  - { offsetInCU: 0x3CE, offset: 0x227EF, size: 0x8, addend: 0x0, symName: '_stdlib::utils::write::_WriteBufferStack::write_bytes[::Bool,::Origin[$2]](stdlib::utils::write::_WriteBufferStack[$0, $1]&,stdlib::memory::span::Span[$2, ::SIMD[{uint8}, {1}], $3]),W=[typevalue<#kgen.typeref<_"stdlib::builtin::file_descriptor::FileDescriptor">>, index, {"__moveinit__" : (!kgen.pointer<index> init_self, !kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__moveinit__(::FileDescriptor=&,::FileDescriptor)_thunk", "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::__del__(::FileDescriptor)_thunk", "write_bytes" : <i1>(!kgen.pointer<index> mut, !kgen.struct<(pointer<none>, index)>) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write_bytes[::Bool,::Origin[$0]](::FileDescriptor&,stdlib::memory::span::Span[$0, ::SIMD[{uint8}, {1}], $1])"<:i1 ?>, "write" : <variadic<type>>(!kgen.pointer<index> mut, !kgen.pointer<struct<(!kgen.pack<variadic_ptr_map(:variadic<type> *(0,0), 0)>, i1)>> read_mem) -> !kgen.none = _"stdlib::builtin::file_descriptor::FileDescriptor::write[*stdlib::utils::write::Writable](::FileDescriptor&,*$0)"<:variadic<type> ?>}],capacity=4096,is_mutable`2x1=0', symObjAddr: 0x753C, symBinAddr: 0x10000A95C, symSize: 0x190 }
  - { offsetInCU: 0x1A, offset: 0x22B7B, size: 0x8, addend: 0x0, symName: '_banjo::key::build_sequences()', symObjAddr: 0x76CC, symBinAddr: 0x10000AAEC, symSize: 0x55A0 }
  - { offsetInCU: 0xE9, offset: 0x22C4A, size: 0x8, addend: 0x0, symName: '_banjo::key::build_sequences()', symObjAddr: 0x76CC, symBinAddr: 0x10000AAEC, symSize: 0x55A0 }
  - { offsetInCU: 0x1A, offset: 0x30903, size: 0x8, addend: 0x0, symName: '_banjo::termios::terminal::tcgetattr(::SIMD[{int32}, {1}])', symObjAddr: 0xCC6C, symBinAddr: 0x10001008C, symSize: 0x1D4 }
  - { offsetInCU: 0x109, offset: 0x309F2, size: 0x8, addend: 0x0, symName: '_banjo::termios::terminal::tcgetattr(::SIMD[{int32}, {1}])', symObjAddr: 0xCC6C, symBinAddr: 0x10001008C, symSize: 0x1D4 }
  - { offsetInCU: 0x1A, offset: 0x30DF4, size: 0x8, addend: 0x0, symName: '_banjo::termios::terminal::tcsetattr(::SIMD[{int32}, {1}],::SIMD[{int32}, {1}],banjo::termios::c::Termios&)', symObjAddr: 0xCE40, symBinAddr: 0x100010260, symSize: 0x98 }
  - { offsetInCU: 0x114, offset: 0x30EEE, size: 0x8, addend: 0x0, symName: '_banjo::termios::terminal::tcsetattr(::SIMD[{int32}, {1}],::SIMD[{int32}, {1}],banjo::termios::c::Termios&)', symObjAddr: 0xCE40, symBinAddr: 0x100010260, symSize: 0x98 }
  - { offsetInCU: 0x1A, offset: 0x31307, size: 0x8, addend: 0x0, symName: '_mog::border::render_horizontal_edge(stdlib::collections::string::String,stdlib::collections::string::String,stdlib::collections::string::String,::Int)', symObjAddr: 0xCED8, symBinAddr: 0x1000102F8, symSize: 0x23C }
  - { offsetInCU: 0x564, offset: 0x31851, size: 0x8, addend: 0x0, symName: '_mog::border::render_horizontal_edge(stdlib::collections::string::String,stdlib::collections::string::String,stdlib::collections::string::String,::Int)', symObjAddr: 0xCED8, symBinAddr: 0x1000102F8, symSize: 0x23C }
  - { offsetInCU: 0x1A, offset: 0x32066, size: 0x8, addend: 0x0, symName: '_mog::color::any_terminal_color_to_any_color(stdlib::utils::variant::Variant[mog::color::NoColor, mog::color::Color, mog::color::ANSIColor, mog::color::AdaptiveColor, mog::color::CompleteColor, mog::color::CompleteAdaptiveColor],mog::renderer::Renderer)', symObjAddr: 0xD114, symBinAddr: 0x100010534, symSize: 0x21C }
  - { offsetInCU: 0x3A0, offset: 0x323EC, size: 0x8, addend: 0x0, symName: '_mog::color::any_terminal_color_to_any_color(stdlib::utils::variant::Variant[mog::color::NoColor, mog::color::Color, mog::color::ANSIColor, mog::color::AdaptiveColor, mog::color::CompleteColor, mog::color::CompleteAdaptiveColor],mog::renderer::Renderer)', symObjAddr: 0xD114, symBinAddr: 0x100010534, symSize: 0x21C }
  - { offsetInCU: 0x1A, offset: 0x32655, size: 0x8, addend: 0x0, symName: '_mog::extensions::get_lines(stdlib::collections::string::String)', symObjAddr: 0xD330, symBinAddr: 0x100010750, symSize: 0x5C0 }
  - { offsetInCU: 0x1368, offset: 0x339A3, size: 0x8, addend: 0x0, symName: '_mog::extensions::get_lines(stdlib::collections::string::String)', symObjAddr: 0xD330, symBinAddr: 0x100010750, symSize: 0x5C0 }
  - { offsetInCU: 0x1A, offset: 0x34C0B, size: 0x8, addend: 0x0, symName: '_mog::extensions::get_widest_line[::Origin[{False}]](stdlib::utils::string_slice::StringSlice[{False}, $0])', symObjAddr: 0xD8F0, symBinAddr: 0x100010D10, symSize: 0x100 }
  - { offsetInCU: 0x2B6, offset: 0x34EA7, size: 0x8, addend: 0x0, symName: '_mog::extensions::get_widest_line[::Origin[{False}]](stdlib::utils::string_slice::StringSlice[{False}, $0])', symObjAddr: 0xD8F0, symBinAddr: 0x100010D10, symSize: 0x100 }
  - { offsetInCU: 0x1A, offset: 0x350DB, size: 0x8, addend: 0x0, symName: '_mog::extensions::pad(stdlib::collections::string::String,::Int,mist::style::Style)', symObjAddr: 0xD9F0, symBinAddr: 0x100010E10, symSize: 0x250 }
  - { offsetInCU: 0xA88, offset: 0x35B49, size: 0x8, addend: 0x0, symName: '_mog::extensions::pad(stdlib::collections::string::String,::Int,mist::style::Style)', symObjAddr: 0xD9F0, symBinAddr: 0x100010E10, symSize: 0x250 }
  - { offsetInCU: 0x1A, offset: 0x364B2, size: 0x8, addend: 0x0, symName: '_mog::style::Style::_maybe_convert_tabs(mog::style::Style,stdlib::collections::string::String)', symObjAddr: 0xDC40, symBinAddr: 0x100011060, symSize: 0x140 }
  - { offsetInCU: 0x718, offset: 0x36BB0, size: 0x8, addend: 0x0, symName: '_mog::style::Style::_maybe_convert_tabs(mog::style::Style,stdlib::collections::string::String)', symObjAddr: 0xDC40, symBinAddr: 0x100011060, symSize: 0x140 }
  - { offsetInCU: 0x1A, offset: 0x36F55, size: 0x8, addend: 0x0, symName: '_mog::style::Style::_style_border(mog::style::Style,stdlib::collections::string::String,stdlib::utils::variant::Variant[mog::color::NoColor, mog::color::Color, mog::color::ANSIColor, mog::color::AdaptiveColor, mog::color::CompleteColor, mog::color::CompleteAdaptiveColor],stdlib::utils::variant::Variant[mog::color::NoColor, mog::color::Color, mog::color::ANSIColor, mog::color::AdaptiveColor, mog::color::CompleteColor, mog::color::CompleteAdaptiveColor])', symObjAddr: 0xDD80, symBinAddr: 0x1000111A0, symSize: 0x130 }
  - { offsetInCU: 0x6B0, offset: 0x375EB, size: 0x8, addend: 0x0, symName: '_mog::style::Style::_style_border(mog::style::Style,stdlib::collections::string::String,stdlib::utils::variant::Variant[mog::color::NoColor, mog::color::Color, mog::color::ANSIColor, mog::color::AdaptiveColor, mog::color::CompleteColor, mog::color::CompleteAdaptiveColor],stdlib::utils::variant::Variant[mog::color::NoColor, mog::color::Color, mog::color::ANSIColor, mog::color::AdaptiveColor, mog::color::CompleteColor, mog::color::CompleteAdaptiveColor])', symObjAddr: 0xDD80, symBinAddr: 0x1000111A0, symSize: 0x130 }
  - { offsetInCU: 0x1A, offset: 0x378A7, size: 0x8, addend: 0x0, symName: '_mog::style::Style::render[*stdlib::utils::write::Writable](mog::style::Style,*$0),Ts=[[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_to" : <type>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"stdlib::collections::string::String::write_to[stdlib::utils::write::Writer](stdlib::collections::string::String,$0&)"<:type ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]]', symObjAddr: 0xDEB0, symBinAddr: 0x1000112D0, symSize: 0x6714 }
  - { offsetInCU: 0x421B, offset: 0x3BAA8, size: 0x8, addend: 0x0, symName: '_mog::style::Style::render[*stdlib::utils::write::Writable](mog::style::Style,*$0),Ts=[[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"write_to" : <type>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"stdlib::collections::string::String::write_to[stdlib::utils::write::Writer](stdlib::collections::string::String,$0&)"<:type ?>, "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)"}]]', symObjAddr: 0xDEB0, symBinAddr: 0x1000112D0, symSize: 0x6714 }
  - { offsetInCU: 0x1A, offset: 0x4E72E, size: 0x8, addend: 0x0, symName: '_mist::color::int_to_str(::SIMD[{uint32}, {1}],::Int)', symObjAddr: 0x145C4, symBinAddr: 0x1000179E4, symSize: 0x31C }
  - { offsetInCU: 0x50B, offset: 0x4EC1F, size: 0x8, addend: 0x0, symName: '_mist::color::int_to_str(::SIMD[{uint32}, {1}],::Int)', symObjAddr: 0x145C4, symBinAddr: 0x1000179E4, symSize: 0x31C }
  - { offsetInCU: 0x1A, offset: 0x4F31B, size: 0x8, addend: 0x0, symName: '_mist::color::RGBColor::sequence(mist::color::RGBColor,::Bool)', symObjAddr: 0x148E0, symBinAddr: 0x100017D00, symSize: 0x15C }
  - { offsetInCU: 0x68C, offset: 0x4F98D, size: 0x8, addend: 0x0, symName: '_mist::color::RGBColor::sequence(mist::color::RGBColor,::Bool)', symObjAddr: 0x148E0, symBinAddr: 0x100017D00, symSize: 0x15C }
  - { offsetInCU: 0x1A, offset: 0x4FD91, size: 0x8, addend: 0x0, symName: '_mist::color::ansi256_to_ansi(::SIMD[{uint32}, {1}])', symObjAddr: 0x14A3C, symBinAddr: 0x100017E5C, symSize: 0x82C }
  - { offsetInCU: 0x3CE, offset: 0x50145, size: 0x8, addend: 0x0, symName: '_mist::color::ansi256_to_ansi(::SIMD[{uint32}, {1}])', symObjAddr: 0x14A3C, symBinAddr: 0x100017E5C, symSize: 0x82C }
  - { offsetInCU: 0x1A, offset: 0x503B1, size: 0x8, addend: 0x0, symName: '_mist::hue::Color::HSLuv(mist::hue::Color)', symObjAddr: 0x15268, symBinAddr: 0x100018688, symSize: 0xD38 }
  - { offsetInCU: 0xBE7, offset: 0x50F7E, size: 0x8, addend: 0x0, symName: '_mist::hue::Color::HSLuv(mist::hue::Color)', symObjAddr: 0x15268, symBinAddr: 0x100018688, symSize: 0xD38 }
  - { offsetInCU: 0x1A, offset: 0x5297B, size: 0x8, addend: 0x0, symName: '_mist::hue::linearize(::SIMD[{float64}, {1}])', symObjAddr: 0x15FA0, symBinAddr: 0x1000193C0, symSize: 0x358 }
  - { offsetInCU: 0x3A0, offset: 0x52D01, size: 0x8, addend: 0x0, symName: '_mist::hue::linearize(::SIMD[{float64}, {1}])', symObjAddr: 0x15FA0, symBinAddr: 0x1000193C0, symSize: 0x358 }
  - { offsetInCU: 0x1A, offset: 0x53023, size: 0x8, addend: 0x0, symName: '_mist::profile::Profile::convert(mist::profile::Profile,stdlib::utils::variant::Variant[mist::color::NoColor, mist::color::ANSIColor, mist::color::ANSI256Color, mist::color::RGBColor])', symObjAddr: 0x162F8, symBinAddr: 0x100019718, symSize: 0x560 }
  - { offsetInCU: 0x5CB, offset: 0x535D4, size: 0x8, addend: 0x0, symName: '_mist::profile::Profile::convert(mist::profile::Profile,stdlib::utils::variant::Variant[mist::color::NoColor, mist::color::ANSIColor, mist::color::ANSI256Color, mist::color::RGBColor])', symObjAddr: 0x162F8, symBinAddr: 0x100019718, symSize: 0x560 }
  - { offsetInCU: 0x1A, offset: 0x53AEE, size: 0x8, addend: 0x0, symName: '_mist::screen::move_cursor(::SIMD[{uint16}, {1}],::Int)', symObjAddr: 0x16858, symBinAddr: 0x100019C78, symSize: 0x3E4 }
  - { offsetInCU: 0x9D2, offset: 0x544A6, size: 0x8, addend: 0x0, symName: '_mist::screen::move_cursor(::SIMD[{uint16}, {1}],::Int)', symObjAddr: 0x16858, symBinAddr: 0x100019C78, symSize: 0x3E4 }
  - { offsetInCU: 0x1A, offset: 0x54D6D, size: 0x8, addend: 0x0, symName: '_mist::style::Style::_add_style(mist::style::Style,stdlib::collections::string::String)', symObjAddr: 0x16C3C, symBinAddr: 0x10001A05C, symSize: 0xF8 }
  - { offsetInCU: 0x32B, offset: 0x5507E, size: 0x8, addend: 0x0, symName: '_mist::style::Style::_add_style(mist::style::Style,stdlib::collections::string::String)', symObjAddr: 0x16C3C, symBinAddr: 0x10001A05C, symSize: 0xF8 }
  - { offsetInCU: 0x1A, offset: 0x5535F, size: 0x8, addend: 0x0, symName: '_mist::style::Style::background(mist::style::Style,stdlib::utils::variant::Variant[mist::color::NoColor, mist::color::ANSIColor, mist::color::ANSI256Color, mist::color::RGBColor])', symObjAddr: 0x16D34, symBinAddr: 0x10001A154, symSize: 0x178 }
  - { offsetInCU: 0x748, offset: 0x55A8D, size: 0x8, addend: 0x0, symName: '_mist::style::Style::background(mist::style::Style,stdlib::utils::variant::Variant[mist::color::NoColor, mist::color::ANSIColor, mist::color::ANSI256Color, mist::color::RGBColor])', symObjAddr: 0x16D34, symBinAddr: 0x10001A154, symSize: 0x178 }
  - { offsetInCU: 0x1A, offset: 0x56047, size: 0x8, addend: 0x0, symName: '_mist::style::Style::foreground(mist::style::Style,stdlib::utils::variant::Variant[mist::color::NoColor, mist::color::ANSIColor, mist::color::ANSI256Color, mist::color::RGBColor])', symObjAddr: 0x16EAC, symBinAddr: 0x10001A2CC, symSize: 0x178 }
  - { offsetInCU: 0x748, offset: 0x56775, size: 0x8, addend: 0x0, symName: '_mist::style::Style::foreground(mist::style::Style,stdlib::utils::variant::Variant[mist::color::NoColor, mist::color::ANSIColor, mist::color::ANSI256Color, mist::color::RGBColor])', symObjAddr: 0x16EAC, symBinAddr: 0x10001A2CC, symSize: 0x178 }
  - { offsetInCU: 0x1A, offset: 0x56D1D, size: 0x8, addend: 0x0, symName: '_mist::style::Style::render[mist::style::SizedWritable](mist::style::Style,$0),T=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__len__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__len__(stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "write_to" : <type>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"stdlib::collections::string::String::write_to[stdlib::utils::write::Writer](stdlib::collections::string::String,$0&)"<:type ?>}]', symObjAddr: 0x17024, symBinAddr: 0x10001A444, symSize: 0x20C }
  - { offsetInCU: 0x8B3, offset: 0x575B6, size: 0x8, addend: 0x0, symName: '_mist::style::Style::render[mist::style::SizedWritable](mist::style::Style,$0),T=[typevalue<#kgen.typeref<_"stdlib::collections::string::String">>, struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>, {"__len__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem) -> index = _"stdlib::collections::string::String::__len__(stdlib::collections::string::String)", "__del__" : (!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> owned_in_mem) -> !kgen.none = _"stdlib::collections::string::String::__del__(stdlib::collections::string::String)", "write_to" : <type>(!kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"stdlib::collections::string::String::write_to[stdlib::utils::write::Writer](stdlib::collections::string::String,$0&)"<:type ?>}]', symObjAddr: 0x17024, symBinAddr: 0x10001A444, symSize: 0x20C }
  - { offsetInCU: 0x1A, offset: 0x57FC8, size: 0x8, addend: 0x0, symName: '_mist::style::Style::render[mist::style::SizedWritable](mist::style::Style,$0),T=[typevalue<#kgen.typeref<_"stdlib::utils::string_slice::StringSlice,is_mutable=0,origin={  }">>, struct<(pointer<none>, index)>, {"__len__" : (!kgen.pointer<struct<(pointer<none>, index)>> read_mem) -> index = _"fn[MutableOrigin](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $0)}], /) -> ::Int|fn(stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $1|0)}], /) -> ::Int|gVkQVctpH9xEcvm5t5P9PJBOixXyN6VJSjR8Lq4XYo8=[MutableOrigin,fn(stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $1|0)}], /) -> ::Int](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $0)}])"<:(!kgen.struct<(pointer<none>, index)>) -> index _"stdlib::utils::string_slice::StringSlice::__len__(stdlib::utils::string_slice::StringSlice[$0, $1])"<:i1 0>>, "__del__" : (!kgen.pointer<struct<(pointer<none>, index)>> owned_in_mem) -> !kgen.none = _"stdlib::utils::string_slice::StringSlice::__del__(stdlib::utils::string_slice::StringSlice[$0, $1])_thunk"<:i1 0>, "write_to" : <type>(!kgen.pointer<struct<(pointer<none>, index)>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[MutableOrigin, stdlib::utils::write::Writer](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $0)}], mut $1, /) -> None|fn[stdlib::utils::write::Writer](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $1|0)}], mut $0, /) -> None|8fTQE+byhg6Qw6nfSv/TtLQxg0t/d8eWdVvce6r4eu0=[MutableOrigin,stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $1|0)}], mut $0, /) -> None](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $0)}],$1&)"<:type ?, :<type>(!kgen.struct<(pointer<none>, index)>, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::utils::string_slice::StringSlice::write_to[stdlib::utils::write::Writer](stdlib::utils::string_slice::StringSlice[$0, $1],$2&)"<:i1 0, :type ?>>}]', symObjAddr: 0x17230, symBinAddr: 0x10001A650, symSize: 0x49C }
  - { offsetInCU: 0xCBE, offset: 0x58C6C, size: 0x8, addend: 0x0, symName: '_mist::style::Style::render[mist::style::SizedWritable](mist::style::Style,$0),T=[typevalue<#kgen.typeref<_"stdlib::utils::string_slice::StringSlice,is_mutable=0,origin={  }">>, struct<(pointer<none>, index)>, {"__len__" : (!kgen.pointer<struct<(pointer<none>, index)>> read_mem) -> index = _"fn[MutableOrigin](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $0)}], /) -> ::Int|fn(stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $1|0)}], /) -> ::Int|gVkQVctpH9xEcvm5t5P9PJBOixXyN6VJSjR8Lq4XYo8=[MutableOrigin,fn(stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $1|0)}], /) -> ::Int](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $0)}])"<:(!kgen.struct<(pointer<none>, index)>) -> index _"stdlib::utils::string_slice::StringSlice::__len__(stdlib::utils::string_slice::StringSlice[$0, $1])"<:i1 0>>, "__del__" : (!kgen.pointer<struct<(pointer<none>, index)>> owned_in_mem) -> !kgen.none = _"stdlib::utils::string_slice::StringSlice::__del__(stdlib::utils::string_slice::StringSlice[$0, $1])_thunk"<:i1 0>, "write_to" : <type>(!kgen.pointer<struct<(pointer<none>, index)>> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[MutableOrigin, stdlib::utils::write::Writer](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $0)}], mut $1, /) -> None|fn[stdlib::utils::write::Writer](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $1|0)}], mut $0, /) -> None|8fTQE+byhg6Qw6nfSv/TtLQxg0t/d8eWdVvce6r4eu0=[MutableOrigin,stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $1|0)}], mut $0, /) -> None](stdlib::utils::string_slice::StringSlice[{False}, {(muttoimm $0)}],$1&)"<:type ?, :<type>(!kgen.struct<(pointer<none>, index)>, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::utils::string_slice::StringSlice::write_to[stdlib::utils::write::Writer](stdlib::utils::string_slice::StringSlice[$0, $1],$2&)"<:i1 0, :type ?>>}]', symObjAddr: 0x17230, symBinAddr: 0x10001A650, symSize: 0x49C }
  - { offsetInCU: 0x1A, offset: 0x59D94, size: 0x8, addend: 0x0, symName: '_weave::ansi::printable_rune_width(stdlib::collections::string::String)', symObjAddr: 0x176CC, symBinAddr: 0x10001AAEC, symSize: 0x3B0 }
  - { offsetInCU: 0x799, offset: 0x5A513, size: 0x8, addend: 0x0, symName: '_weave::ansi::printable_rune_width(stdlib::collections::string::String)', symObjAddr: 0x176CC, symBinAddr: 0x10001AAEC, symSize: 0x3B0 }
  - { offsetInCU: 0x1A, offset: 0x5ABBC, size: 0x8, addend: 0x0, symName: '_weave::bytes::ByteWriter::consume(weave::bytes::ByteWriter&,::Bool)', symObjAddr: 0x17A7C, symBinAddr: 0x10001AE9C, symSize: 0x1BC }
  - { offsetInCU: 0x5DE, offset: 0x5B180, size: 0x8, addend: 0x0, symName: '_weave::bytes::ByteWriter::consume(weave::bytes::ByteWriter&,::Bool)', symObjAddr: 0x17A7C, symBinAddr: 0x10001AE9C, symSize: 0x1BC }
  - { offsetInCU: 0x1A, offset: 0x5B720, size: 0x8, addend: 0x0, symName: '_weave::unicode::Condition::rune_width(weave::unicode::Condition,::SIMD[{uint32}, {1}])', symObjAddr: 0x17C38, symBinAddr: 0x10001B058, symSize: 0x207C }
  - { offsetInCU: 0x27, offset: 0x5B72D, size: 0x8, addend: 0x0, symName: '_weave::unicode::Condition::rune_width(weave::unicode::Condition,::SIMD[{uint32}, {1}])', symObjAddr: 0x17C38, symBinAddr: 0x10001B058, symSize: 0x207C }
  - { offsetInCU: 0x1A, offset: 0x5B7D6, size: 0x8, addend: 0x0, symName: '_weave::unicode::in_table[::Int](::SIMD[{uint32}, {1}],stdlib::collections::inline_array::InlineArray[::Tuple[::SIMD[{uint32}, {1}], ::SIMD[{uint32}, {1}]], $0, {False}]),size=116', symObjAddr: 0x19CB4, symBinAddr: 0x10001D0D4, symSize: 0x154 }
  - { offsetInCU: 0x24D, offset: 0x5BA09, size: 0x8, addend: 0x0, symName: '_weave::unicode::in_table[::Int](::SIMD[{uint32}, {1}],stdlib::collections::inline_array::InlineArray[::Tuple[::SIMD[{uint32}, {1}], ::SIMD[{uint32}, {1}]], $0, {False}]),size=116', symObjAddr: 0x19CB4, symBinAddr: 0x10001D0D4, symSize: 0x154 }
  - { offsetInCU: 0x1A, offset: 0x5BB19, size: 0x8, addend: 0x0, symName: '_weave::unicode::in_table[::Int](::SIMD[{uint32}, {1}],stdlib::collections::inline_array::InlineArray[::Tuple[::SIMD[{uint32}, {1}], ::SIMD[{uint32}, {1}]], $0, {False}]),size=12', symObjAddr: 0x19E08, symBinAddr: 0x10001D228, symSize: 0x144 }
  - { offsetInCU: 0x24B, offset: 0x5BD4A, size: 0x8, addend: 0x0, symName: '_weave::unicode::in_table[::Int](::SIMD[{uint32}, {1}],stdlib::collections::inline_array::InlineArray[::Tuple[::SIMD[{uint32}, {1}], ::SIMD[{uint32}, {1}]], $0, {False}]),size=12', symObjAddr: 0x19E08, symBinAddr: 0x10001D228, symSize: 0x144 }
  - { offsetInCU: 0x1A, offset: 0x5BE59, size: 0x8, addend: 0x0, symName: '_weave::unicode::in_table[::Int](::SIMD[{uint32}, {1}],stdlib::collections::inline_array::InlineArray[::Tuple[::SIMD[{uint32}, {1}], ::SIMD[{uint32}, {1}]], $0, {False}]),size=179', symObjAddr: 0x19F4C, symBinAddr: 0x10001D36C, symSize: 0x154 }
  - { offsetInCU: 0x24D, offset: 0x5C08C, size: 0x8, addend: 0x0, symName: '_weave::unicode::in_table[::Int](::SIMD[{uint32}, {1}],stdlib::collections::inline_array::InlineArray[::Tuple[::SIMD[{uint32}, {1}], ::SIMD[{uint32}, {1}]], $0, {False}]),size=179', symObjAddr: 0x19F4C, symBinAddr: 0x10001D36C, symSize: 0x154 }
  - { offsetInCU: 0x1A, offset: 0x5C19C, size: 0x8, addend: 0x0, symName: '_weave::unicode::in_table[::Int](::SIMD[{uint32}, {1}],stdlib::collections::inline_array::InlineArray[::Tuple[::SIMD[{uint32}, {1}], ::SIMD[{uint32}, {1}]], $0, {False}]),size=43', symObjAddr: 0x1A0A0, symBinAddr: 0x10001D4C0, symSize: 0x154 }
  - { offsetInCU: 0x24D, offset: 0x5C3CF, size: 0x8, addend: 0x0, symName: '_weave::unicode::in_table[::Int](::SIMD[{uint32}, {1}],stdlib::collections::inline_array::InlineArray[::Tuple[::SIMD[{uint32}, {1}], ::SIMD[{uint32}, {1}]], $0, {False}]),size=43', symObjAddr: 0x1A0A0, symBinAddr: 0x10001D4C0, symSize: 0x154 }
  - { offsetInCU: 0x1A, offset: 0x5C4DF, size: 0x8, addend: 0x0, symName: '_weave::unicode::in_table[::Int](::SIMD[{uint32}, {1}],stdlib::collections::inline_array::InlineArray[::Tuple[::SIMD[{uint32}, {1}], ::SIMD[{uint32}, {1}]], $0, {False}]),size=7', symObjAddr: 0x1A1F4, symBinAddr: 0x10001D614, symSize: 0x154 }
  - { offsetInCU: 0x24B, offset: 0x5C710, size: 0x8, addend: 0x0, symName: '_weave::unicode::in_table[::Int](::SIMD[{uint32}, {1}],stdlib::collections::inline_array::InlineArray[::Tuple[::SIMD[{uint32}, {1}], ::SIMD[{uint32}, {1}]], $0, {False}]),size=7', symObjAddr: 0x1A1F4, symBinAddr: 0x10001D614, symSize: 0x154 }
  - { offsetInCU: 0x1A, offset: 0x5C81F, size: 0x8, addend: 0x0, symName: '_weave::unicode::in_table[::Int](::SIMD[{uint32}, {1}],stdlib::collections::inline_array::InlineArray[::Tuple[::SIMD[{uint32}, {1}], ::SIMD[{uint32}, {1}]], $0, {False}]),size=76', symObjAddr: 0x1A348, symBinAddr: 0x10001D768, symSize: 0x154 }
  - { offsetInCU: 0x24D, offset: 0x5CA52, size: 0x8, addend: 0x0, symName: '_weave::unicode::in_table[::Int](::SIMD[{uint32}, {1}],stdlib::collections::inline_array::InlineArray[::Tuple[::SIMD[{uint32}, {1}], ::SIMD[{uint32}, {1}]], $0, {False}]),size=76', symObjAddr: 0x1A348, symBinAddr: 0x10001D768, symSize: 0x154 }
  - { offsetInCU: 0x1A, offset: 0x5CB62, size: 0x8, addend: 0x0, symName: '_weave::word_wrapper::Writer::add_word(weave::word_wrapper::Writer&)', symObjAddr: 0x1A49C, symBinAddr: 0x10001D8BC, symSize: 0x1A8 }
  - { offsetInCU: 0x663, offset: 0x5D1AB, size: 0x8, addend: 0x0, symName: '_weave::word_wrapper::Writer::add_word(weave::word_wrapper::Writer&)', symObjAddr: 0x1A49C, symBinAddr: 0x10001D8BC, symSize: 0x1A8 }
  - { offsetInCU: 0x69E, offset: 0x5D1E6, size: 0x8, addend: 0x0, symName: '_weave::word_wrapper::Writer::add_word(weave::word_wrapper::Writer&)', symObjAddr: 0x1A49C, symBinAddr: 0x10001D8BC, symSize: 0x1A8 }
  - { offsetInCU: 0x6B2, offset: 0x5D1FA, size: 0x8, addend: 0x0, symName: '_weave::word_wrapper::Writer::add_word(weave::word_wrapper::Writer&)', symObjAddr: 0x1A49C, symBinAddr: 0x10001D8BC, symSize: 0x1A8 }
  - { offsetInCU: 0x1A, offset: 0x5D719, size: 0x8, addend: 0x0, symName: '_algorithm::memory::parallel_memcpy[::DType](stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],::Int,::Int,::Int),type=ui8_closure_1', symObjAddr: 0x1A7C0, symBinAddr: 0x10001DBE0, symSize: 0x1C }
  - { offsetInCU: 0x1E3, offset: 0x5D8E2, size: 0x8, addend: 0x0, symName: '_algorithm::memory::parallel_memcpy[::DType](stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],::Int,::Int,::Int),type=ui8_closure_1', symObjAddr: 0x1A7C0, symBinAddr: 0x10001DBE0, symSize: 0x1C }
  - { offsetInCU: 0x1A, offset: 0x5D9AF, size: 0x8, addend: 0x0, symName: '_algorithm::memory::parallel_memcpy[::DType](stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],::Int,::Int,::Int),type=ui8_closure_2', symObjAddr: 0x1A7DC, symBinAddr: 0x10001DBFC, symSize: 0x8 }
  - { offsetInCU: 0xCD, offset: 0x5DA62, size: 0x8, addend: 0x0, symName: '_algorithm::memory::parallel_memcpy[::DType](stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],::Int,::Int,::Int),type=ui8_closure_2', symObjAddr: 0x1A7DC, symBinAddr: 0x10001DBFC, symSize: 0x8 }
  - { offsetInCU: 0xF7, offset: 0x5DA8C, size: 0x8, addend: 0x0, symName: '_algorithm::memory::parallel_memcpy[::DType](stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],::Int,::Int,::Int),type=ui8_closure_2', symObjAddr: 0x1A7DC, symBinAddr: 0x10001DBFC, symSize: 0x8 }
  - { offsetInCU: 0x1A, offset: 0x5DAC8, size: 0x8, addend: 0x0, symName: '_algorithm::memory::parallel_memcpy[::DType](stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],::Int,::Int,::Int),type=ui8_closure_4', symObjAddr: 0x1A960, symBinAddr: 0x10001DD80, symSize: 0x1C }
  - { offsetInCU: 0x1E3, offset: 0x5DC91, size: 0x8, addend: 0x0, symName: '_algorithm::memory::parallel_memcpy[::DType](stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],::Int,::Int,::Int),type=ui8_closure_4', symObjAddr: 0x1A960, symBinAddr: 0x10001DD80, symSize: 0x1C }
  - { offsetInCU: 0x1A, offset: 0x5DD5E, size: 0x8, addend: 0x0, symName: '_algorithm::memory::parallel_memcpy[::DType](stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],::Int,::Int,::Int),type=ui8_closure_5', symObjAddr: 0x1A97C, symBinAddr: 0x10001DD9C, symSize: 0x8 }
  - { offsetInCU: 0xCD, offset: 0x5DE11, size: 0x8, addend: 0x0, symName: '_algorithm::memory::parallel_memcpy[::DType](stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],::Int,::Int,::Int),type=ui8_closure_5', symObjAddr: 0x1A97C, symBinAddr: 0x10001DD9C, symSize: 0x8 }
  - { offsetInCU: 0xF7, offset: 0x5DE3B, size: 0x8, addend: 0x0, symName: '_algorithm::memory::parallel_memcpy[::DType](stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],::Int,::Int,::Int),type=ui8_closure_5', symObjAddr: 0x1A97C, symBinAddr: 0x10001DD9C, symSize: 0x8 }
  - { offsetInCU: 0x1A, offset: 0x5DE77, size: 0x8, addend: 0x0, symName: '_algorithm::memory::parallel_memcpy[::DType](stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],::Int),type=ui8', symObjAddr: 0x1A984, symBinAddr: 0x10001DDA4, symSize: 0x630 }
  - { offsetInCU: 0xE97, offset: 0x5ECF4, size: 0x8, addend: 0x0, symName: '_algorithm::memory::parallel_memcpy[::DType](stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],stdlib::memory::unsafe_pointer::UnsafePointer[::SIMD[$0, {1}], {{0}}, _default_alignment[::AnyType](), {MutableAnyOrigin}],::Int),type=ui8', symObjAddr: 0x1A984, symBinAddr: 0x10001DDA4, symSize: 0x630 }
  - { offsetInCU: 0x1A, offset: 0x5FBBC, size: 0x8, addend: 0x0, symName: '_stdlib::os::os::abort[::AnyType]()_REMOVED_ARG,result=[none, {"__del__" : (!kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::_stubs::__MLIRType::__del__(::__MLIRType[$0])_thunk"<:type none>}]', symObjAddr: 0x1AFB4, symBinAddr: 0x100023730, symSize: 0x4 }
  - { offsetInCU: 0x27, offset: 0x5FBC9, size: 0x8, addend: 0x0, symName: '_stdlib::os::os::abort[::AnyType]()_REMOVED_ARG,result=[none, {"__del__" : (!kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::_stubs::__MLIRType::__del__(::__MLIRType[$0])_thunk"<:type none>}]', symObjAddr: 0x1AFB4, symBinAddr: 0x100023730, symSize: 0x4 }
  - { offsetInCU: 0x1A, offset: 0x5FC06, size: 0x8, addend: 0x0, symName: '_stdlib::os::os::abort[::AnyType,stdlib::utils::write::Writable]($1)_REMOVED_ARG,result=[none, {"__del__" : (!kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::_stubs::__MLIRType::__del__(::__MLIRType[$0])_thunk"<:type none>}],W=[typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}]', symObjAddr: 0x1AFB8, symBinAddr: 0x100023734, symSize: 0x3C }
  - { offsetInCU: 0x27, offset: 0x5FC13, size: 0x8, addend: 0x0, symName: '_stdlib::os::os::abort[::AnyType,stdlib::utils::write::Writable]($1)_REMOVED_ARG,result=[none, {"__del__" : (!kgen.pointer<none> owned_in_mem) -> !kgen.none = _"stdlib::builtin::_stubs::__MLIRType::__del__(::__MLIRType[$0])_thunk"<:type none>}],W=[typevalue<#kgen.typeref<_"stdlib::builtin::string_literal::StringLiteral">>, string, {"write_to" : <type>(!kgen.pointer<string> read_mem, !kgen.pointer<*(0,0)> mut) -> !kgen.none = _"fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None|LeEbfS+UVGp4mzQc/fnPaYYyKVCJsJvl6ZCY+CGvFlk=[stdlib::utils::write::Writer,fn[stdlib::utils::write::Writer](::StringLiteral, mut $0, /) -> None](::StringLiteral,$0&)"<:type ?, :<type>(!kgen.string, !kgen.pointer<*(0,0)> mut) -> !kgen.none _"stdlib::builtin::string_literal::StringLiteral::write_to[stdlib::utils::write::Writer](::StringLiteral,$0&)"<:type ?>>, "__del__" : (!kgen.pointer<string> owned_in_mem) -> !kgen.none = _"stdlib::builtin::string_literal::StringLiteral::__del__(::StringLiteral)_thunk"}]', symObjAddr: 0x1AFB8, symBinAddr: 0x100023734, symSize: 0x3C }
  - { offsetInCU: 0x1A, offset: 0x5FC90, size: 0x8, addend: 0x0, symName: '_stdlib::utils::string_slice::StringSlice::splitlines[::Origin[{False}]](stdlib::utils::string_slice::StringSlice[{False}, $2],::Bool)_REMOVED_ARG', symObjAddr: 0x1AFF4, symBinAddr: 0x10001E3D4, symSize: 0x25C }
  - { offsetInCU: 0x38F, offset: 0x60005, size: 0x8, addend: 0x0, symName: '_stdlib::utils::string_slice::StringSlice::splitlines[::Origin[{False}]](stdlib::utils::string_slice::StringSlice[{False}, $2],::Bool)_REMOVED_ARG', symObjAddr: 0x1AFF4, symBinAddr: 0x10001E3D4, symSize: 0x25C }
  - { offsetInCU: 0x1A, offset: 0x603D9, size: 0x8, addend: 0x0, symName: '_stdlib::utils::format::_FormatCurlyEntry::_format_entry[::Int,::Bool,Origin[$1.value],Variadic[stdlib::utils::format::_CurlyEntryFormattable]](stdlib::utils::format::_FormatCurlyEntry,stdlib::collections::string::String&,::VariadicPack[$1, $2, stdlib::utils::format::_CurlyEntryFormattable, $3],::Int&)_REMOVED_ARG__format(::Int),len_pos_args=1,element_types`2x4=[[typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"__str__" : (!kgen.pointer<index> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::Int) -> stdlib::collections::string::String|fn(::Int) -> stdlib::collections::string::String|4tjQxKvxCvNodhegK6dE2amy9xqmKITK5YwVlYygFAQ=[fn(::Int) -> stdlib::collections::string::String](::Int)"<:(index, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::int::Int::__str__(::Int)">, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk", "__repr__" : (!kgen.pointer<index> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::Int) -> stdlib::collections::string::String|fn(::Int) -> stdlib::collections::string::String|4tjQxKvxCvNodhegK6dE2amy9xqmKITK5YwVlYygFAQ=[fn(::Int) -> stdlib::collections::string::String](::Int)"<:(index, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::int::Int::__repr__(::Int)">}]]', symObjAddr: 0x1B250, symBinAddr: 0x10001E630, symSize: 0x258 }
  - { offsetInCU: 0x6B3, offset: 0x60A72, size: 0x8, addend: 0x0, symName: '_stdlib::utils::format::_FormatCurlyEntry::_format_entry[::Int,::Bool,Origin[$1.value],Variadic[stdlib::utils::format::_CurlyEntryFormattable]](stdlib::utils::format::_FormatCurlyEntry,stdlib::collections::string::String&,::VariadicPack[$1, $2, stdlib::utils::format::_CurlyEntryFormattable, $3],::Int&)_REMOVED_ARG__format(::Int),len_pos_args=1,element_types`2x4=[[typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"__str__" : (!kgen.pointer<index> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::Int) -> stdlib::collections::string::String|fn(::Int) -> stdlib::collections::string::String|4tjQxKvxCvNodhegK6dE2amy9xqmKITK5YwVlYygFAQ=[fn(::Int) -> stdlib::collections::string::String](::Int)"<:(index, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::int::Int::__str__(::Int)">, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk", "__repr__" : (!kgen.pointer<index> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::Int) -> stdlib::collections::string::String|fn(::Int) -> stdlib::collections::string::String|4tjQxKvxCvNodhegK6dE2amy9xqmKITK5YwVlYygFAQ=[fn(::Int) -> stdlib::collections::string::String](::Int)"<:(index, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::int::Int::__repr__(::Int)">}]]', symObjAddr: 0x1B250, symBinAddr: 0x10001E630, symSize: 0x258 }
  - { offsetInCU: 0x1A, offset: 0x61353, size: 0x8, addend: 0x0, symName: '_stdlib::utils::format::_FormatCurlyEntry::_format_entry[::Int,::Bool,Origin[$1.value],Variadic[stdlib::utils::format::_CurlyEntryFormattable]](stdlib::utils::format::_FormatCurlyEntry,stdlib::collections::string::String&,::VariadicPack[$1, $2, stdlib::utils::format::_CurlyEntryFormattable, $3],::Int&)_REMOVED_ARG__format(::Int),len_pos_args=2,element_types`2x4=[[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=ui16,size=1">>, scalar<ui16>, {"__str__" : (!kgen.pointer<scalar<ui16>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String|fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String|281xsG9f5n1fmkSQhP1V7kgU9EPLOTFQx7+o4zrn3Gs=[fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String](::SIMD[{uint16}, {1}])"<:(!pop.scalar<ui16>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::simd::SIMD::__str__(::SIMD[$0, $1])"<:dtype ui16, 1>>, "__del__" : (!kgen.pointer<scalar<ui16>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype ui16, 1>, "__repr__" : (!kgen.pointer<scalar<ui16>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String|fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String|281xsG9f5n1fmkSQhP1V7kgU9EPLOTFQx7+o4zrn3Gs=[fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String](::SIMD[{uint16}, {1}])"<:(!pop.scalar<ui16>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::simd::SIMD::__repr__(::SIMD[$0, $1])"<:dtype ui16, 1>>}], [typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"__str__" : (!kgen.pointer<index> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::Int) -> stdlib::collections::string::String|fn(::Int) -> stdlib::collections::string::String|4tjQxKvxCvNodhegK6dE2amy9xqmKITK5YwVlYygFAQ=[fn(::Int) -> stdlib::collections::string::String](::Int)"<:(index, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::int::Int::__str__(::Int)">, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk", "__repr__" : (!kgen.pointer<index> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::Int) -> stdlib::collections::string::String|fn(::Int) -> stdlib::collections::string::String|4tjQxKvxCvNodhegK6dE2amy9xqmKITK5YwVlYygFAQ=[fn(::Int) -> stdlib::collections::string::String](::Int)"<:(index, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::int::Int::__repr__(::Int)">}]]', symObjAddr: 0x1B4A8, symBinAddr: 0x10001E888, symSize: 0x344 }
  - { offsetInCU: 0x771, offset: 0x61AAA, size: 0x8, addend: 0x0, symName: '_stdlib::utils::format::_FormatCurlyEntry::_format_entry[::Int,::Bool,Origin[$1.value],Variadic[stdlib::utils::format::_CurlyEntryFormattable]](stdlib::utils::format::_FormatCurlyEntry,stdlib::collections::string::String&,::VariadicPack[$1, $2, stdlib::utils::format::_CurlyEntryFormattable, $3],::Int&)_REMOVED_ARG__format(::Int),len_pos_args=2,element_types`2x4=[[typevalue<#kgen.typeref<_"stdlib::builtin::simd::SIMD,type=ui16,size=1">>, scalar<ui16>, {"__str__" : (!kgen.pointer<scalar<ui16>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String|fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String|281xsG9f5n1fmkSQhP1V7kgU9EPLOTFQx7+o4zrn3Gs=[fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String](::SIMD[{uint16}, {1}])"<:(!pop.scalar<ui16>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::simd::SIMD::__str__(::SIMD[$0, $1])"<:dtype ui16, 1>>, "__del__" : (!kgen.pointer<scalar<ui16>> owned_in_mem) -> !kgen.none = _"stdlib::builtin::simd::SIMD::__del__(::SIMD[$0, $1])_thunk"<:dtype ui16, 1>, "__repr__" : (!kgen.pointer<scalar<ui16>> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String|fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String|281xsG9f5n1fmkSQhP1V7kgU9EPLOTFQx7+o4zrn3Gs=[fn(::SIMD[{uint16}, {1}]) -> stdlib::collections::string::String](::SIMD[{uint16}, {1}])"<:(!pop.scalar<ui16>, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::simd::SIMD::__repr__(::SIMD[$0, $1])"<:dtype ui16, 1>>}], [typevalue<#kgen.typeref<_"stdlib::builtin::int::Int">>, index, {"__str__" : (!kgen.pointer<index> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::Int) -> stdlib::collections::string::String|fn(::Int) -> stdlib::collections::string::String|4tjQxKvxCvNodhegK6dE2amy9xqmKITK5YwVlYygFAQ=[fn(::Int) -> stdlib::collections::string::String](::Int)"<:(index, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::int::Int::__str__(::Int)">, "__del__" : (!kgen.pointer<index> owned_in_mem) -> !kgen.none = _"stdlib::builtin::int::Int::__del__(::Int)_thunk", "__repr__" : (!kgen.pointer<index> read_mem, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none = _"fn(::Int) -> stdlib::collections::string::String|fn(::Int) -> stdlib::collections::string::String|4tjQxKvxCvNodhegK6dE2amy9xqmKITK5YwVlYygFAQ=[fn(::Int) -> stdlib::collections::string::String](::Int)"<:(index, !kgen.pointer<struct<(struct<(pointer<none>, index, index) memoryOnly>) memoryOnly>> byref_result) -> !kgen.none _"stdlib::builtin::int::Int::__repr__(::Int)">}]]', symObjAddr: 0x1B4A8, symBinAddr: 0x10001E888, symSize: 0x344 }
  - { offsetInCU: 0x1A, offset: 0x6227A, size: 0x8, addend: 0x0, symName: '_banjo::program::TUI::run(banjo::program::TUI&)_REMOVED_ARG_closure_1', symObjAddr: 0x1DC9C, symBinAddr: 0x10002107C, symSize: 0x1C }
  - { offsetInCU: 0x1E3, offset: 0x62443, size: 0x8, addend: 0x0, symName: '_banjo::program::TUI::run(banjo::program::TUI&)_REMOVED_ARG_closure_1', symObjAddr: 0x1DC9C, symBinAddr: 0x10002107C, symSize: 0x1C }
  - { offsetInCU: 0x1A, offset: 0x62510, size: 0x8, addend: 0x0, symName: '_banjo::program::TUI::run(banjo::program::TUI&)_REMOVED_ARG_closure_2', symObjAddr: 0x1DCB8, symBinAddr: 0x100021098, symSize: 0x8 }
  - { offsetInCU: 0xCD, offset: 0x625C3, size: 0x8, addend: 0x0, symName: '_banjo::program::TUI::run(banjo::program::TUI&)_REMOVED_ARG_closure_2', symObjAddr: 0x1DCB8, symBinAddr: 0x100021098, symSize: 0x8 }
  - { offsetInCU: 0xF7, offset: 0x625ED, size: 0x8, addend: 0x0, symName: '_banjo::program::TUI::run(banjo::program::TUI&)_REMOVED_ARG_closure_2', symObjAddr: 0x1DCB8, symBinAddr: 0x100021098, symSize: 0x8 }
  - { offsetInCU: 0x1A, offset: 0x62629, size: 0x8, addend: 0x0, symName: '_stdlib::utils::string_slice::StringSlice::__mul__(stdlib::utils::string_slice::StringSlice[$0, $1],::Int)_REMOVED_ARG', symObjAddr: 0x1DCC0, symBinAddr: 0x1000210A0, symSize: 0x24C }
  - { offsetInCU: 0x493, offset: 0x62AA2, size: 0x8, addend: 0x0, symName: '_stdlib::utils::string_slice::StringSlice::__mul__(stdlib::utils::string_slice::StringSlice[$0, $1],::Int)_REMOVED_ARG', symObjAddr: 0x1DCC0, symBinAddr: 0x1000210A0, symSize: 0x24C }
  - { offsetInCU: 0x1A, offset: 0x62E66, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::__init__[::Bool,::Origin[$0]](stdlib::collections::string::String=&,stdlib::utils::string_slice::StringSlice[$0, $1])_REMOVED_ARG', symObjAddr: 0x1DF0C, symBinAddr: 0x1000212EC, symSize: 0x12C }
  - { offsetInCU: 0x41D, offset: 0x63269, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::__init__[::Bool,::Origin[$0]](stdlib::collections::string::String=&,stdlib::utils::string_slice::StringSlice[$0, $1])_REMOVED_ARG', symObjAddr: 0x1DF0C, symBinAddr: 0x1000212EC, symSize: 0x12C }
  - { offsetInCU: 0x1A, offset: 0x635C1, size: 0x8, addend: 0x0, symName: '_stdlib::utils::string_slice::StringSlice::__eq__[::Bool,::Origin[$2]](stdlib::utils::string_slice::StringSlice[$0, $1],stdlib::utils::string_slice::StringSlice[$2, $3])_REMOVED_ARG', symObjAddr: 0x1E038, symBinAddr: 0x100021418, symSize: 0x454 }
  - { offsetInCU: 0x4BF, offset: 0x63A66, size: 0x8, addend: 0x0, symName: '_stdlib::utils::string_slice::StringSlice::__eq__[::Bool,::Origin[$2]](stdlib::utils::string_slice::StringSlice[$0, $1],stdlib::utils::string_slice::StringSlice[$2, $3])_REMOVED_ARG', symObjAddr: 0x1E038, symBinAddr: 0x100021418, symSize: 0x454 }
  - { offsetInCU: 0x1A, offset: 0x64841, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::_iadd[::Bool,::Bool,::Origin[$1]](stdlib::collections::string::String&,stdlib::memory::span::Span[$1, ::SIMD[{uint8}, {1}], $2])_REMOVED_ARG,has_null=0', symObjAddr: 0x1E48C, symBinAddr: 0x10002186C, symSize: 0x29C }
  - { offsetInCU: 0x638, offset: 0x64E5F, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::_iadd[::Bool,::Bool,::Origin[$1]](stdlib::collections::string::String&,stdlib::memory::span::Span[$1, ::SIMD[{uint8}, {1}], $2])_REMOVED_ARG,has_null=0', symObjAddr: 0x1E48C, symBinAddr: 0x10002186C, symSize: 0x29C }
  - { offsetInCU: 0x1A, offset: 0x65552, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::_iadd[::Bool,::Bool,::Origin[$1]](stdlib::collections::string::String&,stdlib::memory::span::Span[$1, ::SIMD[{uint8}, {1}], $2])_REMOVED_ARG,has_null=1', symObjAddr: 0x1E728, symBinAddr: 0x100021B08, symSize: 0x29C }
  - { offsetInCU: 0x64E, offset: 0x65B86, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::_iadd[::Bool,::Bool,::Origin[$1]](stdlib::collections::string::String&,stdlib::memory::span::Span[$1, ::SIMD[{uint8}, {1}], $2])_REMOVED_ARG,has_null=1', symObjAddr: 0x1E728, symBinAddr: 0x100021B08, symSize: 0x29C }
  - { offsetInCU: 0x1A, offset: 0x6628B, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::_add[::Bool,::Bool,::Origin[$1],::Bool,::Origin[$3]](stdlib::memory::span::Span[$1, ::SIMD[{uint8}, {1}], $2],stdlib::memory::span::Span[$3, ::SIMD[{uint8}, {1}], $4])_REMOVED_ARG,rhs_has_null=0', symObjAddr: 0x1E9C4, symBinAddr: 0x100021DA4, symSize: 0x288 }
  - { offsetInCU: 0x4D4, offset: 0x66745, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::_add[::Bool,::Bool,::Origin[$1],::Bool,::Origin[$3]](stdlib::memory::span::Span[$1, ::SIMD[{uint8}, {1}], $2],stdlib::memory::span::Span[$3, ::SIMD[{uint8}, {1}], $4])_REMOVED_ARG,rhs_has_null=0', symObjAddr: 0x1E9C4, symBinAddr: 0x100021DA4, symSize: 0x288 }
  - { offsetInCU: 0x1A, offset: 0x66DAC, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::_add[::Bool,::Bool,::Origin[$1],::Bool,::Origin[$3]](stdlib::memory::span::Span[$1, ::SIMD[{uint8}, {1}], $2],stdlib::memory::span::Span[$3, ::SIMD[{uint8}, {1}], $4])_REMOVED_ARG,rhs_has_null=1', symObjAddr: 0x1EC4C, symBinAddr: 0x10002202C, symSize: 0x288 }
  - { offsetInCU: 0x4D4, offset: 0x67266, size: 0x8, addend: 0x0, symName: '_stdlib::collections::string::String::_add[::Bool,::Bool,::Origin[$1],::Bool,::Origin[$3]](stdlib::memory::span::Span[$1, ::SIMD[{uint8}, {1}], $2],stdlib::memory::span::Span[$3, ::SIMD[{uint8}, {1}], $4])_REMOVED_ARG,rhs_has_null=1', symObjAddr: 0x1EC4C, symBinAddr: 0x10002202C, symSize: 0x288 }
  - { offsetInCU: 0x1A, offset: 0x678DF, size: 0x8, addend: 0x0, symName: '_stdlib::utils::string_slice::StringSlice::find[__mlir_type.i1,Origin[$2],::Bool,::Origin[$4]](stdlib::utils::string_slice::StringSlice[$0, $1]%,stdlib::utils::string_slice::StringSlice[$4, $5],::Int)_REMOVED_ARG_REMOVED_ARG', symObjAddr: 0x1EED4, symBinAddr: 0x1000222B4, symSize: 0x40C }
  - { offsetInCU: 0x612, offset: 0x67ED7, size: 0x8, addend: 0x0, symName: '_stdlib::utils::string_slice::StringSlice::find[__mlir_type.i1,Origin[$2],::Bool,::Origin[$4]](stdlib::utils::string_slice::StringSlice[$0, $1]%,stdlib::utils::string_slice::StringSlice[$4, $5],::Int)_REMOVED_ARG_REMOVED_ARG', symObjAddr: 0x1EED4, symBinAddr: 0x1000222B4, symSize: 0x40C }
  - { offsetInCU: 0x1A, offset: 0x6858E, size: 0x8, addend: 0x0, symName: '_stdlib::utils::format::_FormatCurlyEntry::_create_entries[::Bool,::Origin[$0]](stdlib::utils::string_slice::StringSlice[$0, $1],::Int)_REMOVED_ARG', symObjAddr: 0x1F2E0, symBinAddr: 0x1000226C0, symSize: 0x1070 }
  - { offsetInCU: 0x1558, offset: 0x69ACC, size: 0x8, addend: 0x0, symName: '_stdlib::utils::format::_FormatCurlyEntry::_create_entries[::Bool,::Origin[$0]](stdlib::utils::string_slice::StringSlice[$0, $1],::Int)_REMOVED_ARG', symObjAddr: 0x1F2E0, symBinAddr: 0x1000226C0, symSize: 0x1070 }
...
